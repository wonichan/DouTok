// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: refund.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RefundService_RefundCreate_FullMethodName = "/api.RefundService/RefundCreate"
	RefundService_RefundQuery_FullMethodName  = "/api.RefundService/RefundQuery"
	RefundService_RefundUpdate_FullMethodName = "/api.RefundService/RefundUpdate"
)

// RefundServiceClient is the client API for RefundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefundServiceClient interface {
	RefundCreate(ctx context.Context, in *RefundCreateRequest, opts ...grpc.CallOption) (*RefundCreateResponse, error)
	RefundQuery(ctx context.Context, in *RefundQueryRequest, opts ...grpc.CallOption) (*RefundQueryResponse, error)
	RefundUpdate(ctx context.Context, in *RefundUpdateRequest, opts ...grpc.CallOption) (*RefundUpdateResponse, error)
}

type refundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRefundServiceClient(cc grpc.ClientConnInterface) RefundServiceClient {
	return &refundServiceClient{cc}
}

func (c *refundServiceClient) RefundCreate(ctx context.Context, in *RefundCreateRequest, opts ...grpc.CallOption) (*RefundCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundCreateResponse)
	err := c.cc.Invoke(ctx, RefundService_RefundCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundServiceClient) RefundQuery(ctx context.Context, in *RefundQueryRequest, opts ...grpc.CallOption) (*RefundQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundQueryResponse)
	err := c.cc.Invoke(ctx, RefundService_RefundQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundServiceClient) RefundUpdate(ctx context.Context, in *RefundUpdateRequest, opts ...grpc.CallOption) (*RefundUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundUpdateResponse)
	err := c.cc.Invoke(ctx, RefundService_RefundUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefundServiceServer is the server API for RefundService service.
// All implementations should embed UnimplementedRefundServiceServer
// for forward compatibility.
type RefundServiceServer interface {
	RefundCreate(context.Context, *RefundCreateRequest) (*RefundCreateResponse, error)
	RefundQuery(context.Context, *RefundQueryRequest) (*RefundQueryResponse, error)
	RefundUpdate(context.Context, *RefundUpdateRequest) (*RefundUpdateResponse, error)
}

// UnimplementedRefundServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRefundServiceServer struct{}

func (UnimplementedRefundServiceServer) RefundCreate(context.Context, *RefundCreateRequest) (*RefundCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundCreate not implemented")
}
func (UnimplementedRefundServiceServer) RefundQuery(context.Context, *RefundQueryRequest) (*RefundQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundQuery not implemented")
}
func (UnimplementedRefundServiceServer) RefundUpdate(context.Context, *RefundUpdateRequest) (*RefundUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundUpdate not implemented")
}
func (UnimplementedRefundServiceServer) testEmbeddedByValue() {}

// UnsafeRefundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefundServiceServer will
// result in compilation errors.
type UnsafeRefundServiceServer interface {
	mustEmbedUnimplementedRefundServiceServer()
}

func RegisterRefundServiceServer(s grpc.ServiceRegistrar, srv RefundServiceServer) {
	// If the following call pancis, it indicates UnimplementedRefundServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RefundService_ServiceDesc, srv)
}

func _RefundService_RefundCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).RefundCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_RefundCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).RefundCreate(ctx, req.(*RefundCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundService_RefundQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).RefundQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_RefundQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).RefundQuery(ctx, req.(*RefundQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundService_RefundUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).RefundUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_RefundUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).RefundUpdate(ctx, req.(*RefundUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RefundService_ServiceDesc is the grpc.ServiceDesc for RefundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RefundService",
	HandlerType: (*RefundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefundCreate",
			Handler:    _RefundService_RefundCreate_Handler,
		},
		{
			MethodName: "RefundQuery",
			Handler:    _RefundService_RefundQuery_Handler,
		},
		{
			MethodName: "RefundUpdate",
			Handler:    _RefundService_RefundUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "refund.proto",
}
