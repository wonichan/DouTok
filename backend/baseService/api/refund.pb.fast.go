// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	validate "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *RefundCreateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefundCreateRequest[number], err)
}

func (x *RefundCreateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundCreateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.RefundCreateType = RefundCreateType(v)
	return offset, nil
}

func (x *RefundCreateRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.RefundType = RefundOrderType(v)
	return offset, nil
}

func (x *RefundCreateRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.PaymentId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundCreateRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.RefundAmount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *RefundCreateRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.RefundReason, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefundCreateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefundCreateResponse[number], err)
}

func (x *RefundCreateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *RefundCreateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v RefundOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.RefundOrder = &v
	return offset, nil
}

func (x *RefundQueryRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefundQueryRequest[number], err)
}

func (x *RefundQueryRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.OrderIdList = append(x.OrderIdList, v)
			return offset, err
		})
	return offset, err
}

func (x *RefundQueryRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.RefundOrderNoList = append(x.RefundOrderNoList, v)
	return offset, err
}

func (x *RefundQueryRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.PaymentIdList = append(x.PaymentIdList, v)
			return offset, err
		})
	return offset, err
}

func (x *RefundQueryResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefundQueryResponse[number], err)
}

func (x *RefundQueryResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *RefundQueryResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v RefundOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.RefundOrderList = append(x.RefundOrderList, &v)
	return offset, nil
}

func (x *RefundUpdateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefundUpdateRequest[number], err)
}

func (x *RefundUpdateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.RefundOrderStatus = RefundOrderStatus(v)
	return offset, nil
}

func (x *RefundUpdateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.RefundOrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundUpdateRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.RefundReason, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefundUpdateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefundUpdateResponse[number], err)
}

func (x *RefundUpdateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *RefundUpdateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v RefundOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.RefundOrder = &v
	return offset, nil
}

func (x *RefundCreateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *RefundCreateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *RefundCreateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.RefundCreateType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetRefundCreateType()))
	return offset
}

func (x *RefundCreateRequest) fastWriteField3(buf []byte) (offset int) {
	if x.RefundType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetRefundType()))
	return offset
}

func (x *RefundCreateRequest) fastWriteField4(buf []byte) (offset int) {
	if x.PaymentId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetPaymentId())
	return offset
}

func (x *RefundCreateRequest) fastWriteField5(buf []byte) (offset int) {
	if x.RefundAmount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 5, x.GetRefundAmount())
	return offset
}

func (x *RefundCreateRequest) fastWriteField6(buf []byte) (offset int) {
	if x.RefundReason == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetRefundReason())
	return offset
}

func (x *RefundCreateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RefundCreateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *RefundCreateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.RefundOrder == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetRefundOrder())
	return offset
}

func (x *RefundQueryRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *RefundQueryRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.OrderIdList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetOrderIdList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetOrderIdList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *RefundQueryRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.RefundOrderNoList) == 0 {
		return offset
	}
	for i := range x.GetRefundOrderNoList() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetRefundOrderNoList()[i])
	}
	return offset
}

func (x *RefundQueryRequest) fastWriteField3(buf []byte) (offset int) {
	if len(x.PaymentIdList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 3, len(x.GetPaymentIdList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetPaymentIdList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *RefundQueryResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RefundQueryResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *RefundQueryResponse) fastWriteField2(buf []byte) (offset int) {
	if x.RefundOrderList == nil {
		return offset
	}
	for i := range x.GetRefundOrderList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetRefundOrderList()[i])
	}
	return offset
}

func (x *RefundUpdateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *RefundUpdateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.RefundOrderStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetRefundOrderStatus()))
	return offset
}

func (x *RefundUpdateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.RefundOrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetRefundOrderId())
	return offset
}

func (x *RefundUpdateRequest) fastWriteField3(buf []byte) (offset int) {
	if x.RefundReason == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetRefundReason())
	return offset
}

func (x *RefundUpdateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RefundUpdateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *RefundUpdateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.RefundOrder == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetRefundOrder())
	return offset
}

func (x *RefundCreateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *RefundCreateRequest) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *RefundCreateRequest) sizeField2() (n int) {
	if x.RefundCreateType == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetRefundCreateType()))
	return n
}

func (x *RefundCreateRequest) sizeField3() (n int) {
	if x.RefundType == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetRefundType()))
	return n
}

func (x *RefundCreateRequest) sizeField4() (n int) {
	if x.PaymentId == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetPaymentId())
	return n
}

func (x *RefundCreateRequest) sizeField5() (n int) {
	if x.RefundAmount == 0 {
		return n
	}
	n += fastpb.SizeUint64(5, x.GetRefundAmount())
	return n
}

func (x *RefundCreateRequest) sizeField6() (n int) {
	if x.RefundReason == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetRefundReason())
	return n
}

func (x *RefundCreateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RefundCreateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *RefundCreateResponse) sizeField2() (n int) {
	if x.RefundOrder == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetRefundOrder())
	return n
}

func (x *RefundQueryRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *RefundQueryRequest) sizeField1() (n int) {
	if len(x.OrderIdList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetOrderIdList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetOrderIdList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *RefundQueryRequest) sizeField2() (n int) {
	if len(x.RefundOrderNoList) == 0 {
		return n
	}
	for i := range x.GetRefundOrderNoList() {
		n += fastpb.SizeString(2, x.GetRefundOrderNoList()[i])
	}
	return n
}

func (x *RefundQueryRequest) sizeField3() (n int) {
	if len(x.PaymentIdList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(3, len(x.GetPaymentIdList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetPaymentIdList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *RefundQueryResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RefundQueryResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *RefundQueryResponse) sizeField2() (n int) {
	if x.RefundOrderList == nil {
		return n
	}
	for i := range x.GetRefundOrderList() {
		n += fastpb.SizeMessage(2, x.GetRefundOrderList()[i])
	}
	return n
}

func (x *RefundUpdateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *RefundUpdateRequest) sizeField1() (n int) {
	if x.RefundOrderStatus == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetRefundOrderStatus()))
	return n
}

func (x *RefundUpdateRequest) sizeField2() (n int) {
	if x.RefundOrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetRefundOrderId())
	return n
}

func (x *RefundUpdateRequest) sizeField3() (n int) {
	if x.RefundReason == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetRefundReason())
	return n
}

func (x *RefundUpdateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RefundUpdateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *RefundUpdateResponse) sizeField2() (n int) {
	if x.RefundOrder == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetRefundOrder())
	return n
}

var fieldIDToName_RefundCreateRequest = map[int32]string{
	1: "OrderId",
	2: "RefundCreateType",
	3: "RefundType",
	4: "PaymentId",
	5: "RefundAmount",
	6: "RefundReason",
}

var fieldIDToName_RefundCreateResponse = map[int32]string{
	1: "Meta",
	2: "RefundOrder",
}

var fieldIDToName_RefundQueryRequest = map[int32]string{
	1: "OrderIdList",
	2: "RefundOrderNoList",
	3: "PaymentIdList",
}

var fieldIDToName_RefundQueryResponse = map[int32]string{
	1: "Meta",
	2: "RefundOrderList",
}

var fieldIDToName_RefundUpdateRequest = map[int32]string{
	1: "RefundOrderStatus",
	2: "RefundOrderId",
	3: "RefundReason",
}

var fieldIDToName_RefundUpdateResponse = map[int32]string{
	1: "Meta",
	2: "RefundOrder",
}

var _ = validate.File_buf_validate_validate_proto
