// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	validate "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *TradeParticipant) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TradeParticipant[number], err)
}

func (x *TradeParticipant) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradePromotion) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TradePromotion[number], err)
}

func (x *TradePromotion) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PromotionId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradePromotion) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PromotionName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TradePromotion) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PromotionAmount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *TradePromotion) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Decrption, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TradePromotion) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PromotionType = TradePromotionType(v)
	return offset, nil
}

func (x *TradePromotion) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.EntryId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradePromotion) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeliveryInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeliveryInfo[number], err)
}

func (x *DeliveryInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.DeliveryType = DeliveryType(v)
	return offset, nil
}

func (x *DeliveryInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.DeliveryCompany = DeliveryCompany(v)
	return offset, nil
}

func (x *DeliveryInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.DeliveryNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeliveryInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeliveryInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ReceiverName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeliveryInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ReceiverMobile, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeliveryInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.ReceiverAddress, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeliveryInfo) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	if x.Extra == nil {
		x.Extra = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Extra[key] = value
	return offset, nil
}

func (x *TimeoutInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TimeoutInfo[number], err)
}

func (x *TimeoutInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ExpectTimeOut, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TimeoutInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ActualTimeOut, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TimeoutInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Executed, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *PaymentInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PaymentInfo[number], err)
}

func (x *PaymentInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PaymentInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PaymentInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PaymentNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PaymentInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PayScene = PayScene(v)
	return offset, nil
}

func (x *PaymentInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.PaidAmount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *PaymentInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PayPhase = PayPhase(v)
	return offset, nil
}

func (x *PaymentInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PayChannel = PayChannel(v)
	return offset, nil
}

func (x *PaymentInfo) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PayStatus = PayStatus(v)
	return offset, nil
}

func (x *PaymentInfo) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PaymentInfo) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.PayTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PaymentInfo) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.CloseTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PaymentInfo) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.SuccessTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PaymentInfo) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundOrder) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefundOrder[number], err)
}

func (x *RefundOrder) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.RefundId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundOrder) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundOrder) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PaymentId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundOrder) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.RefundAmount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundOrder) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.RefundTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundOrder) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundOrder) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundOrder) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.CloseTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefundOrder) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.RefundReason, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefundOrder) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.RefundType = RefundOrderType(v)
	return offset, nil
}

func (x *RefundOrder) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.RefundStatus = RefundOrderStatus(v)
	return offset, nil
}

func (x *TradeOrder) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 19:
		offset, err = x.fastReadField19(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 22:
		offset, err = x.fastReadField22(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 23:
		offset, err = x.fastReadField23(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 24:
		offset, err = x.fastReadField24(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 25:
		offset, err = x.fastReadField25(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 26:
		offset, err = x.fastReadField26(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 27:
		offset, err = x.fastReadField27(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 28:
		offset, err = x.fastReadField28(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 29:
		offset, err = x.fastReadField29(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 30:
		offset, err = x.fastReadField30(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TradeOrder[number], err)
}

func (x *TradeOrder) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.BizType = TradeBizType(v)
	return offset, nil
}

func (x *TradeOrder) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.SaleWay = TradeSaleWay(v)
	return offset, nil
}

func (x *TradeOrder) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PaySequence = TradePaySequence(v)
	return offset, nil
}

func (x *TradeOrder) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.GoodsType = TradeGoodsType(v)
	return offset, nil
}

func (x *TradeOrder) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OrderStatus = TradeOrderStatusEnum(v)
	return offset, nil
}

func (x *TradeOrder) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.BizStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.BizOrderNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.BizId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	var v TradeParticipant
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Buyer = &v
	return offset, nil
}

func (x *TradeOrder) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	var v TradeParticipant
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Seller = &v
	return offset, nil
}

func (x *TradeOrder) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PayType = PayType(v)
	return offset, nil
}

func (x *TradeOrder) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.PayableAmount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.PaidAmount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.PromotionAmount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	var v TradePromotion
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Promotions = append(x.Promotions, &v)
	return offset, nil
}

func (x *TradeOrder) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	var v DeliveryInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.DeliveryInfo = &v
	return offset, nil
}

func (x *TradeOrder) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField19(buf []byte, _type int8) (offset int, err error) {
	x.PayTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	x.DeliveryTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	x.CloseTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField22(buf []byte, _type int8) (offset int, err error) {
	var v TimeoutInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TimeoutInfo = &v
	return offset, nil
}

func (x *TradeOrder) fastReadField23(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.CloseType = CloseType(v)
	return offset, nil
}

func (x *TradeOrder) fastReadField24(buf []byte, _type int8) (offset int, err error) {
	x.CloseReason, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField25(buf []byte, _type int8) (offset int, err error) {
	var v TradeOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SubOrder = append(x.SubOrder, &v)
	return offset, nil
}

func (x *TradeOrder) fastReadField26(buf []byte, _type int8) (offset int, err error) {
	var v PaymentInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Payments = append(x.Payments, &v)
	return offset, nil
}

func (x *TradeOrder) fastReadField27(buf []byte, _type int8) (offset int, err error) {
	if x.Extra == nil {
		x.Extra = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Extra[key] = value
	return offset, nil
}

func (x *TradeOrder) fastReadField28(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.TradeOrderRelation = TradeOrderRelation(v)
	return offset, nil
}

func (x *TradeOrder) fastReadField29(buf []byte, _type int8) (offset int, err error) {
	x.OriginOrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeOrder) fastReadField30(buf []byte, _type int8) (offset int, err error) {
	var v RefundOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Refunds = append(x.Refunds, &v)
	return offset, nil
}

func (x *TradeParticipant) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *TradeParticipant) fastWriteField1(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetAccountId())
	return offset
}

func (x *TradePromotion) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *TradePromotion) fastWriteField1(buf []byte) (offset int) {
	if x.PromotionId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetPromotionId())
	return offset
}

func (x *TradePromotion) fastWriteField2(buf []byte) (offset int) {
	if x.PromotionName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPromotionName())
	return offset
}

func (x *TradePromotion) fastWriteField3(buf []byte) (offset int) {
	if x.PromotionAmount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 3, x.GetPromotionAmount())
	return offset
}

func (x *TradePromotion) fastWriteField4(buf []byte) (offset int) {
	if x.Decrption == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDecrption())
	return offset
}

func (x *TradePromotion) fastWriteField5(buf []byte) (offset int) {
	if x.PromotionType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetPromotionType()))
	return offset
}

func (x *TradePromotion) fastWriteField6(buf []byte) (offset int) {
	if x.EntryId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetEntryId())
	return offset
}

func (x *TradePromotion) fastWriteField7(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetAccountId())
	return offset
}

func (x *DeliveryInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *DeliveryInfo) fastWriteField1(buf []byte) (offset int) {
	if x.DeliveryType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetDeliveryType()))
	return offset
}

func (x *DeliveryInfo) fastWriteField2(buf []byte) (offset int) {
	if x.DeliveryCompany == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetDeliveryCompany()))
	return offset
}

func (x *DeliveryInfo) fastWriteField3(buf []byte) (offset int) {
	if x.DeliveryNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDeliveryNo())
	return offset
}

func (x *DeliveryInfo) fastWriteField4(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetId())
	return offset
}

func (x *DeliveryInfo) fastWriteField5(buf []byte) (offset int) {
	if x.ReceiverName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetReceiverName())
	return offset
}

func (x *DeliveryInfo) fastWriteField6(buf []byte) (offset int) {
	if x.ReceiverMobile == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetReceiverMobile())
	return offset
}

func (x *DeliveryInfo) fastWriteField7(buf []byte) (offset int) {
	if x.ReceiverAddress == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetReceiverAddress())
	return offset
}

func (x *DeliveryInfo) fastWriteField8(buf []byte) (offset int) {
	if x.Extra == nil {
		return offset
	}
	for k, v := range x.GetExtra() {
		offset += fastpb.WriteMapEntry(buf[offset:], 8,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *TimeoutInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *TimeoutInfo) fastWriteField1(buf []byte) (offset int) {
	if x.ExpectTimeOut == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetExpectTimeOut())
	return offset
}

func (x *TimeoutInfo) fastWriteField2(buf []byte) (offset int) {
	if x.ActualTimeOut == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetActualTimeOut())
	return offset
}

func (x *TimeoutInfo) fastWriteField3(buf []byte) (offset int) {
	if !x.Executed {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetExecuted())
	return offset
}

func (x *PaymentInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	return offset
}

func (x *PaymentInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *PaymentInfo) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *PaymentInfo) fastWriteField3(buf []byte) (offset int) {
	if x.PaymentNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPaymentNo())
	return offset
}

func (x *PaymentInfo) fastWriteField4(buf []byte) (offset int) {
	if x.PayScene == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetPayScene()))
	return offset
}

func (x *PaymentInfo) fastWriteField5(buf []byte) (offset int) {
	if x.PaidAmount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 5, x.GetPaidAmount())
	return offset
}

func (x *PaymentInfo) fastWriteField6(buf []byte) (offset int) {
	if x.PayPhase == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetPayPhase()))
	return offset
}

func (x *PaymentInfo) fastWriteField7(buf []byte) (offset int) {
	if x.PayChannel == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, int32(x.GetPayChannel()))
	return offset
}

func (x *PaymentInfo) fastWriteField8(buf []byte) (offset int) {
	if x.PayStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 8, int32(x.GetPayStatus()))
	return offset
}

func (x *PaymentInfo) fastWriteField9(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetCreateTime())
	return offset
}

func (x *PaymentInfo) fastWriteField10(buf []byte) (offset int) {
	if x.PayTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetPayTime())
	return offset
}

func (x *PaymentInfo) fastWriteField11(buf []byte) (offset int) {
	if x.CloseTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetCloseTime())
	return offset
}

func (x *PaymentInfo) fastWriteField12(buf []byte) (offset int) {
	if x.SuccessTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetSuccessTime())
	return offset
}

func (x *PaymentInfo) fastWriteField13(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetUpdateTime())
	return offset
}

func (x *RefundOrder) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *RefundOrder) fastWriteField1(buf []byte) (offset int) {
	if x.RefundId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetRefundId())
	return offset
}

func (x *RefundOrder) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *RefundOrder) fastWriteField3(buf []byte) (offset int) {
	if x.PaymentId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetPaymentId())
	return offset
}

func (x *RefundOrder) fastWriteField4(buf []byte) (offset int) {
	if x.RefundAmount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetRefundAmount())
	return offset
}

func (x *RefundOrder) fastWriteField5(buf []byte) (offset int) {
	if x.RefundTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetRefundTime())
	return offset
}

func (x *RefundOrder) fastWriteField6(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCreateTime())
	return offset
}

func (x *RefundOrder) fastWriteField7(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetUpdateTime())
	return offset
}

func (x *RefundOrder) fastWriteField8(buf []byte) (offset int) {
	if x.CloseTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetCloseTime())
	return offset
}

func (x *RefundOrder) fastWriteField9(buf []byte) (offset int) {
	if x.RefundReason == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetRefundReason())
	return offset
}

func (x *RefundOrder) fastWriteField10(buf []byte) (offset int) {
	if x.RefundType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 10, int32(x.GetRefundType()))
	return offset
}

func (x *RefundOrder) fastWriteField11(buf []byte) (offset int) {
	if x.RefundStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 11, int32(x.GetRefundStatus()))
	return offset
}

func (x *TradeOrder) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField19(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	offset += x.fastWriteField22(buf[offset:])
	offset += x.fastWriteField23(buf[offset:])
	offset += x.fastWriteField24(buf[offset:])
	offset += x.fastWriteField25(buf[offset:])
	offset += x.fastWriteField26(buf[offset:])
	offset += x.fastWriteField27(buf[offset:])
	offset += x.fastWriteField28(buf[offset:])
	offset += x.fastWriteField29(buf[offset:])
	offset += x.fastWriteField30(buf[offset:])
	return offset
}

func (x *TradeOrder) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *TradeOrder) fastWriteField2(buf []byte) (offset int) {
	if x.BizType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetBizType()))
	return offset
}

func (x *TradeOrder) fastWriteField3(buf []byte) (offset int) {
	if x.SaleWay == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetSaleWay()))
	return offset
}

func (x *TradeOrder) fastWriteField4(buf []byte) (offset int) {
	if x.PaySequence == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetPaySequence()))
	return offset
}

func (x *TradeOrder) fastWriteField5(buf []byte) (offset int) {
	if x.GoodsType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetGoodsType()))
	return offset
}

func (x *TradeOrder) fastWriteField6(buf []byte) (offset int) {
	if x.OrderStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetOrderStatus()))
	return offset
}

func (x *TradeOrder) fastWriteField7(buf []byte) (offset int) {
	if x.BizStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetBizStatus())
	return offset
}

func (x *TradeOrder) fastWriteField8(buf []byte) (offset int) {
	if x.BizOrderNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetBizOrderNo())
	return offset
}

func (x *TradeOrder) fastWriteField9(buf []byte) (offset int) {
	if x.BizId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetBizId())
	return offset
}

func (x *TradeOrder) fastWriteField10(buf []byte) (offset int) {
	if x.Buyer == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 10, x.GetBuyer())
	return offset
}

func (x *TradeOrder) fastWriteField11(buf []byte) (offset int) {
	if x.Seller == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 11, x.GetSeller())
	return offset
}

func (x *TradeOrder) fastWriteField12(buf []byte) (offset int) {
	if x.PayType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 12, int32(x.GetPayType()))
	return offset
}

func (x *TradeOrder) fastWriteField13(buf []byte) (offset int) {
	if x.PayableAmount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 13, x.GetPayableAmount())
	return offset
}

func (x *TradeOrder) fastWriteField14(buf []byte) (offset int) {
	if x.PaidAmount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 14, x.GetPaidAmount())
	return offset
}

func (x *TradeOrder) fastWriteField15(buf []byte) (offset int) {
	if x.PromotionAmount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 15, x.GetPromotionAmount())
	return offset
}

func (x *TradeOrder) fastWriteField16(buf []byte) (offset int) {
	if x.Promotions == nil {
		return offset
	}
	for i := range x.GetPromotions() {
		offset += fastpb.WriteMessage(buf[offset:], 16, x.GetPromotions()[i])
	}
	return offset
}

func (x *TradeOrder) fastWriteField17(buf []byte) (offset int) {
	if x.DeliveryInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 17, x.GetDeliveryInfo())
	return offset
}

func (x *TradeOrder) fastWriteField18(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 18, x.GetCreateTime())
	return offset
}

func (x *TradeOrder) fastWriteField19(buf []byte) (offset int) {
	if x.PayTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 19, x.GetPayTime())
	return offset
}

func (x *TradeOrder) fastWriteField20(buf []byte) (offset int) {
	if x.DeliveryTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 20, x.GetDeliveryTime())
	return offset
}

func (x *TradeOrder) fastWriteField21(buf []byte) (offset int) {
	if x.CloseTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 21, x.GetCloseTime())
	return offset
}

func (x *TradeOrder) fastWriteField22(buf []byte) (offset int) {
	if x.TimeoutInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 22, x.GetTimeoutInfo())
	return offset
}

func (x *TradeOrder) fastWriteField23(buf []byte) (offset int) {
	if x.CloseType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 23, int32(x.GetCloseType()))
	return offset
}

func (x *TradeOrder) fastWriteField24(buf []byte) (offset int) {
	if x.CloseReason == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 24, x.GetCloseReason())
	return offset
}

func (x *TradeOrder) fastWriteField25(buf []byte) (offset int) {
	if x.SubOrder == nil {
		return offset
	}
	for i := range x.GetSubOrder() {
		offset += fastpb.WriteMessage(buf[offset:], 25, x.GetSubOrder()[i])
	}
	return offset
}

func (x *TradeOrder) fastWriteField26(buf []byte) (offset int) {
	if x.Payments == nil {
		return offset
	}
	for i := range x.GetPayments() {
		offset += fastpb.WriteMessage(buf[offset:], 26, x.GetPayments()[i])
	}
	return offset
}

func (x *TradeOrder) fastWriteField27(buf []byte) (offset int) {
	if x.Extra == nil {
		return offset
	}
	for k, v := range x.GetExtra() {
		offset += fastpb.WriteMapEntry(buf[offset:], 27,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *TradeOrder) fastWriteField28(buf []byte) (offset int) {
	if x.TradeOrderRelation == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 28, int32(x.GetTradeOrderRelation()))
	return offset
}

func (x *TradeOrder) fastWriteField29(buf []byte) (offset int) {
	if x.OriginOrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 29, x.GetOriginOrderId())
	return offset
}

func (x *TradeOrder) fastWriteField30(buf []byte) (offset int) {
	if x.Refunds == nil {
		return offset
	}
	for i := range x.GetRefunds() {
		offset += fastpb.WriteMessage(buf[offset:], 30, x.GetRefunds()[i])
	}
	return offset
}

func (x *TradeParticipant) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *TradeParticipant) sizeField1() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetAccountId())
	return n
}

func (x *TradePromotion) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *TradePromotion) sizeField1() (n int) {
	if x.PromotionId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetPromotionId())
	return n
}

func (x *TradePromotion) sizeField2() (n int) {
	if x.PromotionName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPromotionName())
	return n
}

func (x *TradePromotion) sizeField3() (n int) {
	if x.PromotionAmount == 0 {
		return n
	}
	n += fastpb.SizeUint64(3, x.GetPromotionAmount())
	return n
}

func (x *TradePromotion) sizeField4() (n int) {
	if x.Decrption == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDecrption())
	return n
}

func (x *TradePromotion) sizeField5() (n int) {
	if x.PromotionType == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetPromotionType()))
	return n
}

func (x *TradePromotion) sizeField6() (n int) {
	if x.EntryId == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetEntryId())
	return n
}

func (x *TradePromotion) sizeField7() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetAccountId())
	return n
}

func (x *DeliveryInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *DeliveryInfo) sizeField1() (n int) {
	if x.DeliveryType == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetDeliveryType()))
	return n
}

func (x *DeliveryInfo) sizeField2() (n int) {
	if x.DeliveryCompany == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetDeliveryCompany()))
	return n
}

func (x *DeliveryInfo) sizeField3() (n int) {
	if x.DeliveryNo == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDeliveryNo())
	return n
}

func (x *DeliveryInfo) sizeField4() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetId())
	return n
}

func (x *DeliveryInfo) sizeField5() (n int) {
	if x.ReceiverName == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetReceiverName())
	return n
}

func (x *DeliveryInfo) sizeField6() (n int) {
	if x.ReceiverMobile == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetReceiverMobile())
	return n
}

func (x *DeliveryInfo) sizeField7() (n int) {
	if x.ReceiverAddress == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetReceiverAddress())
	return n
}

func (x *DeliveryInfo) sizeField8() (n int) {
	if x.Extra == nil {
		return n
	}
	for k, v := range x.GetExtra() {
		n += fastpb.SizeMapEntry(8,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *TimeoutInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *TimeoutInfo) sizeField1() (n int) {
	if x.ExpectTimeOut == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetExpectTimeOut())
	return n
}

func (x *TimeoutInfo) sizeField2() (n int) {
	if x.ActualTimeOut == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetActualTimeOut())
	return n
}

func (x *TimeoutInfo) sizeField3() (n int) {
	if !x.Executed {
		return n
	}
	n += fastpb.SizeBool(3, x.GetExecuted())
	return n
}

func (x *PaymentInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	return n
}

func (x *PaymentInfo) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *PaymentInfo) sizeField2() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetOrderId())
	return n
}

func (x *PaymentInfo) sizeField3() (n int) {
	if x.PaymentNo == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPaymentNo())
	return n
}

func (x *PaymentInfo) sizeField4() (n int) {
	if x.PayScene == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetPayScene()))
	return n
}

func (x *PaymentInfo) sizeField5() (n int) {
	if x.PaidAmount == 0 {
		return n
	}
	n += fastpb.SizeUint64(5, x.GetPaidAmount())
	return n
}

func (x *PaymentInfo) sizeField6() (n int) {
	if x.PayPhase == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetPayPhase()))
	return n
}

func (x *PaymentInfo) sizeField7() (n int) {
	if x.PayChannel == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, int32(x.GetPayChannel()))
	return n
}

func (x *PaymentInfo) sizeField8() (n int) {
	if x.PayStatus == 0 {
		return n
	}
	n += fastpb.SizeInt32(8, int32(x.GetPayStatus()))
	return n
}

func (x *PaymentInfo) sizeField9() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetCreateTime())
	return n
}

func (x *PaymentInfo) sizeField10() (n int) {
	if x.PayTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetPayTime())
	return n
}

func (x *PaymentInfo) sizeField11() (n int) {
	if x.CloseTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetCloseTime())
	return n
}

func (x *PaymentInfo) sizeField12() (n int) {
	if x.SuccessTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetSuccessTime())
	return n
}

func (x *PaymentInfo) sizeField13() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetUpdateTime())
	return n
}

func (x *RefundOrder) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *RefundOrder) sizeField1() (n int) {
	if x.RefundId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetRefundId())
	return n
}

func (x *RefundOrder) sizeField2() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetOrderId())
	return n
}

func (x *RefundOrder) sizeField3() (n int) {
	if x.PaymentId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetPaymentId())
	return n
}

func (x *RefundOrder) sizeField4() (n int) {
	if x.RefundAmount == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetRefundAmount())
	return n
}

func (x *RefundOrder) sizeField5() (n int) {
	if x.RefundTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetRefundTime())
	return n
}

func (x *RefundOrder) sizeField6() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCreateTime())
	return n
}

func (x *RefundOrder) sizeField7() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetUpdateTime())
	return n
}

func (x *RefundOrder) sizeField8() (n int) {
	if x.CloseTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetCloseTime())
	return n
}

func (x *RefundOrder) sizeField9() (n int) {
	if x.RefundReason == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetRefundReason())
	return n
}

func (x *RefundOrder) sizeField10() (n int) {
	if x.RefundType == 0 {
		return n
	}
	n += fastpb.SizeInt32(10, int32(x.GetRefundType()))
	return n
}

func (x *RefundOrder) sizeField11() (n int) {
	if x.RefundStatus == 0 {
		return n
	}
	n += fastpb.SizeInt32(11, int32(x.GetRefundStatus()))
	return n
}

func (x *TradeOrder) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField19()
	n += x.sizeField20()
	n += x.sizeField21()
	n += x.sizeField22()
	n += x.sizeField23()
	n += x.sizeField24()
	n += x.sizeField25()
	n += x.sizeField26()
	n += x.sizeField27()
	n += x.sizeField28()
	n += x.sizeField29()
	n += x.sizeField30()
	return n
}

func (x *TradeOrder) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *TradeOrder) sizeField2() (n int) {
	if x.BizType == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetBizType()))
	return n
}

func (x *TradeOrder) sizeField3() (n int) {
	if x.SaleWay == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetSaleWay()))
	return n
}

func (x *TradeOrder) sizeField4() (n int) {
	if x.PaySequence == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetPaySequence()))
	return n
}

func (x *TradeOrder) sizeField5() (n int) {
	if x.GoodsType == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetGoodsType()))
	return n
}

func (x *TradeOrder) sizeField6() (n int) {
	if x.OrderStatus == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetOrderStatus()))
	return n
}

func (x *TradeOrder) sizeField7() (n int) {
	if x.BizStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetBizStatus())
	return n
}

func (x *TradeOrder) sizeField8() (n int) {
	if x.BizOrderNo == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetBizOrderNo())
	return n
}

func (x *TradeOrder) sizeField9() (n int) {
	if x.BizId == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetBizId())
	return n
}

func (x *TradeOrder) sizeField10() (n int) {
	if x.Buyer == nil {
		return n
	}
	n += fastpb.SizeMessage(10, x.GetBuyer())
	return n
}

func (x *TradeOrder) sizeField11() (n int) {
	if x.Seller == nil {
		return n
	}
	n += fastpb.SizeMessage(11, x.GetSeller())
	return n
}

func (x *TradeOrder) sizeField12() (n int) {
	if x.PayType == 0 {
		return n
	}
	n += fastpb.SizeInt32(12, int32(x.GetPayType()))
	return n
}

func (x *TradeOrder) sizeField13() (n int) {
	if x.PayableAmount == 0 {
		return n
	}
	n += fastpb.SizeUint64(13, x.GetPayableAmount())
	return n
}

func (x *TradeOrder) sizeField14() (n int) {
	if x.PaidAmount == 0 {
		return n
	}
	n += fastpb.SizeUint64(14, x.GetPaidAmount())
	return n
}

func (x *TradeOrder) sizeField15() (n int) {
	if x.PromotionAmount == 0 {
		return n
	}
	n += fastpb.SizeUint64(15, x.GetPromotionAmount())
	return n
}

func (x *TradeOrder) sizeField16() (n int) {
	if x.Promotions == nil {
		return n
	}
	for i := range x.GetPromotions() {
		n += fastpb.SizeMessage(16, x.GetPromotions()[i])
	}
	return n
}

func (x *TradeOrder) sizeField17() (n int) {
	if x.DeliveryInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(17, x.GetDeliveryInfo())
	return n
}

func (x *TradeOrder) sizeField18() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(18, x.GetCreateTime())
	return n
}

func (x *TradeOrder) sizeField19() (n int) {
	if x.PayTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(19, x.GetPayTime())
	return n
}

func (x *TradeOrder) sizeField20() (n int) {
	if x.DeliveryTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(20, x.GetDeliveryTime())
	return n
}

func (x *TradeOrder) sizeField21() (n int) {
	if x.CloseTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(21, x.GetCloseTime())
	return n
}

func (x *TradeOrder) sizeField22() (n int) {
	if x.TimeoutInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(22, x.GetTimeoutInfo())
	return n
}

func (x *TradeOrder) sizeField23() (n int) {
	if x.CloseType == 0 {
		return n
	}
	n += fastpb.SizeInt32(23, int32(x.GetCloseType()))
	return n
}

func (x *TradeOrder) sizeField24() (n int) {
	if x.CloseReason == "" {
		return n
	}
	n += fastpb.SizeString(24, x.GetCloseReason())
	return n
}

func (x *TradeOrder) sizeField25() (n int) {
	if x.SubOrder == nil {
		return n
	}
	for i := range x.GetSubOrder() {
		n += fastpb.SizeMessage(25, x.GetSubOrder()[i])
	}
	return n
}

func (x *TradeOrder) sizeField26() (n int) {
	if x.Payments == nil {
		return n
	}
	for i := range x.GetPayments() {
		n += fastpb.SizeMessage(26, x.GetPayments()[i])
	}
	return n
}

func (x *TradeOrder) sizeField27() (n int) {
	if x.Extra == nil {
		return n
	}
	for k, v := range x.GetExtra() {
		n += fastpb.SizeMapEntry(27,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *TradeOrder) sizeField28() (n int) {
	if x.TradeOrderRelation == 0 {
		return n
	}
	n += fastpb.SizeInt32(28, int32(x.GetTradeOrderRelation()))
	return n
}

func (x *TradeOrder) sizeField29() (n int) {
	if x.OriginOrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(29, x.GetOriginOrderId())
	return n
}

func (x *TradeOrder) sizeField30() (n int) {
	if x.Refunds == nil {
		return n
	}
	for i := range x.GetRefunds() {
		n += fastpb.SizeMessage(30, x.GetRefunds()[i])
	}
	return n
}

var fieldIDToName_TradeParticipant = map[int32]string{
	1: "AccountId",
}

var fieldIDToName_TradePromotion = map[int32]string{
	1: "PromotionId",
	2: "PromotionName",
	3: "PromotionAmount",
	4: "Decrption",
	5: "PromotionType",
	6: "EntryId",
	7: "AccountId",
}

var fieldIDToName_DeliveryInfo = map[int32]string{
	1: "DeliveryType",
	2: "DeliveryCompany",
	3: "DeliveryNo",
	4: "Id",
	5: "ReceiverName",
	6: "ReceiverMobile",
	7: "ReceiverAddress",
	8: "Extra",
}

var fieldIDToName_TimeoutInfo = map[int32]string{
	1: "ExpectTimeOut",
	2: "ActualTimeOut",
	3: "Executed",
}

var fieldIDToName_PaymentInfo = map[int32]string{
	1:  "Id",
	2:  "OrderId",
	3:  "PaymentNo",
	4:  "PayScene",
	5:  "PaidAmount",
	6:  "PayPhase",
	7:  "PayChannel",
	8:  "PayStatus",
	9:  "CreateTime",
	10: "PayTime",
	11: "CloseTime",
	12: "SuccessTime",
	13: "UpdateTime",
}

var fieldIDToName_RefundOrder = map[int32]string{
	1:  "RefundId",
	2:  "OrderId",
	3:  "PaymentId",
	4:  "RefundAmount",
	5:  "RefundTime",
	6:  "CreateTime",
	7:  "UpdateTime",
	8:  "CloseTime",
	9:  "RefundReason",
	10: "RefundType",
	11: "RefundStatus",
}

var fieldIDToName_TradeOrder = map[int32]string{
	1:  "OrderId",
	2:  "BizType",
	3:  "SaleWay",
	4:  "PaySequence",
	5:  "GoodsType",
	6:  "OrderStatus",
	7:  "BizStatus",
	8:  "BizOrderNo",
	9:  "BizId",
	10: "Buyer",
	11: "Seller",
	12: "PayType",
	13: "PayableAmount",
	14: "PaidAmount",
	15: "PromotionAmount",
	16: "Promotions",
	17: "DeliveryInfo",
	18: "CreateTime",
	19: "PayTime",
	20: "DeliveryTime",
	21: "CloseTime",
	22: "TimeoutInfo",
	23: "CloseType",
	24: "CloseReason",
	25: "SubOrder",
	26: "Payments",
	27: "Extra",
	28: "TradeOrderRelation",
	29: "OriginOrderId",
	30: "Refunds",
}

var _ = validate.File_buf_validate_validate_proto
