// Code generated by Kitex v0.12.3. DO NOT EDIT.

package postservice

import (
	api "DouTok-example/backend/baseService/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateTemplate(ctx context.Context, Req *api.CreateTemplateRequest, callOptions ...callopt.Option) (r *api.CreateTemplateResponse, err error)
	UpdateTemplate(ctx context.Context, Req *api.UpdateTemplateRequest, callOptions ...callopt.Option) (r *api.UpdateTemplateResponse, err error)
	ListTemplate(ctx context.Context, Req *api.ListTemplateRequest, callOptions ...callopt.Option) (r *api.ListTemplateResponse, err error)
	GetTemplate(ctx context.Context, Req *api.GetTemplateRequest, callOptions ...callopt.Option) (r *api.GetTemplateResponse, err error)
	RemoveTemplate(ctx context.Context, Req *api.RemoveTemplateRequest, callOptions ...callopt.Option) (r *api.RemoveTemplateResponse, err error)
	SendSms(ctx context.Context, Req *api.SendSmsRequest, callOptions ...callopt.Option) (r *api.SendSmsResponse, err error)
	SendEmail(ctx context.Context, Req *api.SendEmailRequest, callOptions ...callopt.Option) (r *api.SendEmailResponse, err error)
	Send(ctx context.Context, Req *api.SendRequest, callOptions ...callopt.Option) (r *api.SendResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPostServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPostServiceClient struct {
	*kClient
}

func (p *kPostServiceClient) CreateTemplate(ctx context.Context, Req *api.CreateTemplateRequest, callOptions ...callopt.Option) (r *api.CreateTemplateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateTemplate(ctx, Req)
}

func (p *kPostServiceClient) UpdateTemplate(ctx context.Context, Req *api.UpdateTemplateRequest, callOptions ...callopt.Option) (r *api.UpdateTemplateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateTemplate(ctx, Req)
}

func (p *kPostServiceClient) ListTemplate(ctx context.Context, Req *api.ListTemplateRequest, callOptions ...callopt.Option) (r *api.ListTemplateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListTemplate(ctx, Req)
}

func (p *kPostServiceClient) GetTemplate(ctx context.Context, Req *api.GetTemplateRequest, callOptions ...callopt.Option) (r *api.GetTemplateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTemplate(ctx, Req)
}

func (p *kPostServiceClient) RemoveTemplate(ctx context.Context, Req *api.RemoveTemplateRequest, callOptions ...callopt.Option) (r *api.RemoveTemplateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveTemplate(ctx, Req)
}

func (p *kPostServiceClient) SendSms(ctx context.Context, Req *api.SendSmsRequest, callOptions ...callopt.Option) (r *api.SendSmsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendSms(ctx, Req)
}

func (p *kPostServiceClient) SendEmail(ctx context.Context, Req *api.SendEmailRequest, callOptions ...callopt.Option) (r *api.SendEmailResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendEmail(ctx, Req)
}

func (p *kPostServiceClient) Send(ctx context.Context, Req *api.SendRequest, callOptions ...callopt.Option) (r *api.SendResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Send(ctx, Req)
}
