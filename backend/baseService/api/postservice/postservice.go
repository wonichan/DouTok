// Code generated by Kitex v0.12.3. DO NOT EDIT.

package postservice

import (
	api "DouTok-example/backend/baseService/kitex_gen/api"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateTemplate": kitex.NewMethodInfo(
		createTemplateHandler,
		newCreateTemplateArgs,
		newCreateTemplateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateTemplate": kitex.NewMethodInfo(
		updateTemplateHandler,
		newUpdateTemplateArgs,
		newUpdateTemplateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListTemplate": kitex.NewMethodInfo(
		listTemplateHandler,
		newListTemplateArgs,
		newListTemplateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetTemplate": kitex.NewMethodInfo(
		getTemplateHandler,
		newGetTemplateArgs,
		newGetTemplateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RemoveTemplate": kitex.NewMethodInfo(
		removeTemplateHandler,
		newRemoveTemplateArgs,
		newRemoveTemplateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SendSms": kitex.NewMethodInfo(
		sendSmsHandler,
		newSendSmsArgs,
		newSendSmsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SendEmail": kitex.NewMethodInfo(
		sendEmailHandler,
		newSendEmailArgs,
		newSendEmailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Send": kitex.NewMethodInfo(
		sendHandler,
		newSendArgs,
		newSendResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	postServiceServiceInfo                = NewServiceInfo()
	postServiceServiceInfoForClient       = NewServiceInfoForClient()
	postServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return postServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return postServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return postServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PostService"
	handlerType := (*api.PostService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func createTemplateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.CreateTemplateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PostService).CreateTemplate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateTemplateArgs:
		success, err := handler.(api.PostService).CreateTemplate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateTemplateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateTemplateArgs() interface{} {
	return &CreateTemplateArgs{}
}

func newCreateTemplateResult() interface{} {
	return &CreateTemplateResult{}
}

type CreateTemplateArgs struct {
	Req *api.CreateTemplateRequest
}

func (p *CreateTemplateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.CreateTemplateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateTemplateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateTemplateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateTemplateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateTemplateArgs) Unmarshal(in []byte) error {
	msg := new(api.CreateTemplateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateTemplateArgs_Req_DEFAULT *api.CreateTemplateRequest

func (p *CreateTemplateArgs) GetReq() *api.CreateTemplateRequest {
	if !p.IsSetReq() {
		return CreateTemplateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateTemplateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateTemplateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateTemplateResult struct {
	Success *api.CreateTemplateResponse
}

var CreateTemplateResult_Success_DEFAULT *api.CreateTemplateResponse

func (p *CreateTemplateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.CreateTemplateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateTemplateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateTemplateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateTemplateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateTemplateResult) Unmarshal(in []byte) error {
	msg := new(api.CreateTemplateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateTemplateResult) GetSuccess() *api.CreateTemplateResponse {
	if !p.IsSetSuccess() {
		return CreateTemplateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateTemplateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.CreateTemplateResponse)
}

func (p *CreateTemplateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateTemplateResult) GetResult() interface{} {
	return p.Success
}

func updateTemplateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.UpdateTemplateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PostService).UpdateTemplate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateTemplateArgs:
		success, err := handler.(api.PostService).UpdateTemplate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateTemplateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateTemplateArgs() interface{} {
	return &UpdateTemplateArgs{}
}

func newUpdateTemplateResult() interface{} {
	return &UpdateTemplateResult{}
}

type UpdateTemplateArgs struct {
	Req *api.UpdateTemplateRequest
}

func (p *UpdateTemplateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.UpdateTemplateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateTemplateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateTemplateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateTemplateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateTemplateArgs) Unmarshal(in []byte) error {
	msg := new(api.UpdateTemplateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateTemplateArgs_Req_DEFAULT *api.UpdateTemplateRequest

func (p *UpdateTemplateArgs) GetReq() *api.UpdateTemplateRequest {
	if !p.IsSetReq() {
		return UpdateTemplateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateTemplateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateTemplateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateTemplateResult struct {
	Success *api.UpdateTemplateResponse
}

var UpdateTemplateResult_Success_DEFAULT *api.UpdateTemplateResponse

func (p *UpdateTemplateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.UpdateTemplateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateTemplateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateTemplateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateTemplateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateTemplateResult) Unmarshal(in []byte) error {
	msg := new(api.UpdateTemplateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateTemplateResult) GetSuccess() *api.UpdateTemplateResponse {
	if !p.IsSetSuccess() {
		return UpdateTemplateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateTemplateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.UpdateTemplateResponse)
}

func (p *UpdateTemplateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateTemplateResult) GetResult() interface{} {
	return p.Success
}

func listTemplateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.ListTemplateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PostService).ListTemplate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListTemplateArgs:
		success, err := handler.(api.PostService).ListTemplate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListTemplateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListTemplateArgs() interface{} {
	return &ListTemplateArgs{}
}

func newListTemplateResult() interface{} {
	return &ListTemplateResult{}
}

type ListTemplateArgs struct {
	Req *api.ListTemplateRequest
}

func (p *ListTemplateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.ListTemplateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListTemplateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListTemplateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListTemplateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListTemplateArgs) Unmarshal(in []byte) error {
	msg := new(api.ListTemplateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListTemplateArgs_Req_DEFAULT *api.ListTemplateRequest

func (p *ListTemplateArgs) GetReq() *api.ListTemplateRequest {
	if !p.IsSetReq() {
		return ListTemplateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListTemplateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListTemplateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListTemplateResult struct {
	Success *api.ListTemplateResponse
}

var ListTemplateResult_Success_DEFAULT *api.ListTemplateResponse

func (p *ListTemplateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.ListTemplateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListTemplateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListTemplateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListTemplateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListTemplateResult) Unmarshal(in []byte) error {
	msg := new(api.ListTemplateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListTemplateResult) GetSuccess() *api.ListTemplateResponse {
	if !p.IsSetSuccess() {
		return ListTemplateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListTemplateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.ListTemplateResponse)
}

func (p *ListTemplateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListTemplateResult) GetResult() interface{} {
	return p.Success
}

func getTemplateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.GetTemplateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PostService).GetTemplate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetTemplateArgs:
		success, err := handler.(api.PostService).GetTemplate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTemplateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetTemplateArgs() interface{} {
	return &GetTemplateArgs{}
}

func newGetTemplateResult() interface{} {
	return &GetTemplateResult{}
}

type GetTemplateArgs struct {
	Req *api.GetTemplateRequest
}

func (p *GetTemplateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.GetTemplateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetTemplateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetTemplateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetTemplateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetTemplateArgs) Unmarshal(in []byte) error {
	msg := new(api.GetTemplateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTemplateArgs_Req_DEFAULT *api.GetTemplateRequest

func (p *GetTemplateArgs) GetReq() *api.GetTemplateRequest {
	if !p.IsSetReq() {
		return GetTemplateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTemplateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetTemplateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetTemplateResult struct {
	Success *api.GetTemplateResponse
}

var GetTemplateResult_Success_DEFAULT *api.GetTemplateResponse

func (p *GetTemplateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.GetTemplateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetTemplateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetTemplateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetTemplateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetTemplateResult) Unmarshal(in []byte) error {
	msg := new(api.GetTemplateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTemplateResult) GetSuccess() *api.GetTemplateResponse {
	if !p.IsSetSuccess() {
		return GetTemplateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTemplateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.GetTemplateResponse)
}

func (p *GetTemplateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTemplateResult) GetResult() interface{} {
	return p.Success
}

func removeTemplateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.RemoveTemplateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PostService).RemoveTemplate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RemoveTemplateArgs:
		success, err := handler.(api.PostService).RemoveTemplate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RemoveTemplateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRemoveTemplateArgs() interface{} {
	return &RemoveTemplateArgs{}
}

func newRemoveTemplateResult() interface{} {
	return &RemoveTemplateResult{}
}

type RemoveTemplateArgs struct {
	Req *api.RemoveTemplateRequest
}

func (p *RemoveTemplateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.RemoveTemplateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RemoveTemplateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RemoveTemplateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RemoveTemplateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RemoveTemplateArgs) Unmarshal(in []byte) error {
	msg := new(api.RemoveTemplateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RemoveTemplateArgs_Req_DEFAULT *api.RemoveTemplateRequest

func (p *RemoveTemplateArgs) GetReq() *api.RemoveTemplateRequest {
	if !p.IsSetReq() {
		return RemoveTemplateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RemoveTemplateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RemoveTemplateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RemoveTemplateResult struct {
	Success *api.RemoveTemplateResponse
}

var RemoveTemplateResult_Success_DEFAULT *api.RemoveTemplateResponse

func (p *RemoveTemplateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.RemoveTemplateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RemoveTemplateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RemoveTemplateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RemoveTemplateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RemoveTemplateResult) Unmarshal(in []byte) error {
	msg := new(api.RemoveTemplateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RemoveTemplateResult) GetSuccess() *api.RemoveTemplateResponse {
	if !p.IsSetSuccess() {
		return RemoveTemplateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RemoveTemplateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.RemoveTemplateResponse)
}

func (p *RemoveTemplateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoveTemplateResult) GetResult() interface{} {
	return p.Success
}

func sendSmsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.SendSmsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PostService).SendSms(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendSmsArgs:
		success, err := handler.(api.PostService).SendSms(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendSmsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendSmsArgs() interface{} {
	return &SendSmsArgs{}
}

func newSendSmsResult() interface{} {
	return &SendSmsResult{}
}

type SendSmsArgs struct {
	Req *api.SendSmsRequest
}

func (p *SendSmsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.SendSmsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendSmsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendSmsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendSmsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendSmsArgs) Unmarshal(in []byte) error {
	msg := new(api.SendSmsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendSmsArgs_Req_DEFAULT *api.SendSmsRequest

func (p *SendSmsArgs) GetReq() *api.SendSmsRequest {
	if !p.IsSetReq() {
		return SendSmsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendSmsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendSmsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendSmsResult struct {
	Success *api.SendSmsResponse
}

var SendSmsResult_Success_DEFAULT *api.SendSmsResponse

func (p *SendSmsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.SendSmsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendSmsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendSmsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendSmsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendSmsResult) Unmarshal(in []byte) error {
	msg := new(api.SendSmsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendSmsResult) GetSuccess() *api.SendSmsResponse {
	if !p.IsSetSuccess() {
		return SendSmsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendSmsResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.SendSmsResponse)
}

func (p *SendSmsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendSmsResult) GetResult() interface{} {
	return p.Success
}

func sendEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.SendEmailRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PostService).SendEmail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendEmailArgs:
		success, err := handler.(api.PostService).SendEmail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendEmailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendEmailArgs() interface{} {
	return &SendEmailArgs{}
}

func newSendEmailResult() interface{} {
	return &SendEmailResult{}
}

type SendEmailArgs struct {
	Req *api.SendEmailRequest
}

func (p *SendEmailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.SendEmailRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendEmailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendEmailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendEmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendEmailArgs) Unmarshal(in []byte) error {
	msg := new(api.SendEmailRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendEmailArgs_Req_DEFAULT *api.SendEmailRequest

func (p *SendEmailArgs) GetReq() *api.SendEmailRequest {
	if !p.IsSetReq() {
		return SendEmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendEmailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendEmailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendEmailResult struct {
	Success *api.SendEmailResponse
}

var SendEmailResult_Success_DEFAULT *api.SendEmailResponse

func (p *SendEmailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.SendEmailResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendEmailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendEmailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendEmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendEmailResult) Unmarshal(in []byte) error {
	msg := new(api.SendEmailResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendEmailResult) GetSuccess() *api.SendEmailResponse {
	if !p.IsSetSuccess() {
		return SendEmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendEmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.SendEmailResponse)
}

func (p *SendEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendEmailResult) GetResult() interface{} {
	return p.Success
}

func sendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.SendRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PostService).Send(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendArgs:
		success, err := handler.(api.PostService).Send(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendArgs() interface{} {
	return &SendArgs{}
}

func newSendResult() interface{} {
	return &SendResult{}
}

type SendArgs struct {
	Req *api.SendRequest
}

func (p *SendArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.SendRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendArgs) Unmarshal(in []byte) error {
	msg := new(api.SendRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendArgs_Req_DEFAULT *api.SendRequest

func (p *SendArgs) GetReq() *api.SendRequest {
	if !p.IsSetReq() {
		return SendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendResult struct {
	Success *api.SendResponse
}

var SendResult_Success_DEFAULT *api.SendResponse

func (p *SendResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.SendResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendResult) Unmarshal(in []byte) error {
	msg := new(api.SendResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendResult) GetSuccess() *api.SendResponse {
	if !p.IsSetSuccess() {
		return SendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.SendResponse)
}

func (p *SendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateTemplate(ctx context.Context, Req *api.CreateTemplateRequest) (r *api.CreateTemplateResponse, err error) {
	var _args CreateTemplateArgs
	_args.Req = Req
	var _result CreateTemplateResult
	if err = p.c.Call(ctx, "CreateTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTemplate(ctx context.Context, Req *api.UpdateTemplateRequest) (r *api.UpdateTemplateResponse, err error) {
	var _args UpdateTemplateArgs
	_args.Req = Req
	var _result UpdateTemplateResult
	if err = p.c.Call(ctx, "UpdateTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTemplate(ctx context.Context, Req *api.ListTemplateRequest) (r *api.ListTemplateResponse, err error) {
	var _args ListTemplateArgs
	_args.Req = Req
	var _result ListTemplateResult
	if err = p.c.Call(ctx, "ListTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTemplate(ctx context.Context, Req *api.GetTemplateRequest) (r *api.GetTemplateResponse, err error) {
	var _args GetTemplateArgs
	_args.Req = Req
	var _result GetTemplateResult
	if err = p.c.Call(ctx, "GetTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveTemplate(ctx context.Context, Req *api.RemoveTemplateRequest) (r *api.RemoveTemplateResponse, err error) {
	var _args RemoveTemplateArgs
	_args.Req = Req
	var _result RemoveTemplateResult
	if err = p.c.Call(ctx, "RemoveTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendSms(ctx context.Context, Req *api.SendSmsRequest) (r *api.SendSmsResponse, err error) {
	var _args SendSmsArgs
	_args.Req = Req
	var _result SendSmsResult
	if err = p.c.Call(ctx, "SendSms", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendEmail(ctx context.Context, Req *api.SendEmailRequest) (r *api.SendEmailResponse, err error) {
	var _args SendEmailArgs
	_args.Req = Req
	var _result SendEmailResult
	if err = p.c.Call(ctx, "SendEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Send(ctx context.Context, Req *api.SendRequest) (r *api.SendResponse, err error) {
	var _args SendArgs
	_args.Req = Req
	var _result SendResult
	if err = p.c.Call(ctx, "Send", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
