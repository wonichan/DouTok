// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	validate "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *QueryTradeOrderRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryTradeOrderRequest[number], err)
}

func (x *QueryTradeOrderRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.OrderIdList = append(x.OrderIdList, v)
			return offset, err
		})
	return offset, err
}

func (x *QueryTradeOrderRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.BizOrderNoList = append(x.BizOrderNoList, v)
	return offset, err
}

func (x *QueryTradeOrderResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryTradeOrderResponse[number], err)
}

func (x *QueryTradeOrderResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *QueryTradeOrderResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TradeOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TradeOrderList = append(x.TradeOrderList, &v)
	return offset, nil
}

func (x *TradeCreateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TradeCreateRequest[number], err)
}

func (x *TradeCreateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.BizType = TradeBizType(v)
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.SaleWay = TradeSaleWay(v)
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PaySequence = TradePaySequence(v)
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.GoodsType = TradeGoodsType(v)
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.BizStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeCreateRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.BizOrderNo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TradeCreateRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.BizId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeCreateRequest) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v TradeParticipant
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Buyer = &v
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v TradeParticipant
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Seller = &v
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PayType = PayType(v)
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.PayableAmount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *TradeCreateRequest) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Promotions = append(x.Promotions, v)
			return offset, err
		})
	return offset, err
}

func (x *TradeCreateRequest) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	var v DeliveryInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.DeliveryInfo = &v
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.DeliveryTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TradeCreateRequest) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	var v TimeoutInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TimeoutInfo = &v
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	var v TradeCreateRequest
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SubOrderList = append(x.SubOrderList, &v)
	return offset, nil
}

func (x *TradeCreateRequest) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	if x.Extra == nil {
		x.Extra = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Extra[key] = value
	return offset, nil
}

func (x *TradeCreateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TradeCreateResponse[number], err)
}

func (x *TradeCreateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *TradeCreateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TradeOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TradeOrder = &v
	return offset, nil
}

func (x *MergeTradeRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MergeTradeRequest[number], err)
}

func (x *MergeTradeRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OriginalOrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MergeTradeRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.OrderIdList = append(x.OrderIdList, v)
			return offset, err
		})
	return offset, err
}

func (x *MergeTradeResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MergeTradeResponse[number], err)
}

func (x *MergeTradeResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *MergeTradeResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TradeOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TradeOrder = &v
	return offset, nil
}

func (x *UpdateExtendInfoRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateExtendInfoRequest[number], err)
}

func (x *UpdateExtendInfoRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateExtendInfoRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.Extra == nil {
		x.Extra = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Extra[key] = value
	return offset, nil
}

func (x *UpdateExtendInfoResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateExtendInfoResponse[number], err)
}

func (x *UpdateExtendInfoResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *UpdateExtendInfoResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TradeOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TradeOrder = &v
	return offset, nil
}

func (x *UpdateTradeOrderStatusRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateTradeOrderStatusRequest[number], err)
}

func (x *UpdateTradeOrderStatusRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateTradeOrderStatusRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OrderStatus = TradeOrderStatusEnum(v)
	return offset, nil
}

func (x *UpdateTradeOrderStatusRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.CloseType = CloseType(v)
	return offset, nil
}

func (x *UpdateTradeOrderStatusRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CloseReason, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateTradeOrderStatusResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateTradeOrderStatusResponse[number], err)
}

func (x *UpdateTradeOrderStatusResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *UpdateTradeOrderStatusResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TradeOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TradeOrder = &v
	return offset, nil
}

func (x *UpdateDeliveryInfoRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateDeliveryInfoRequest[number], err)
}

func (x *UpdateDeliveryInfoRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateDeliveryInfoRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v DeliveryInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.DeliveryInfo = &v
	return offset, nil
}

func (x *UpdateDeliveryInfoResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateDeliveryInfoResponse[number], err)
}

func (x *UpdateDeliveryInfoResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *UpdateDeliveryInfoResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TradeOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TradeOrder = &v
	return offset, nil
}

func (x *AddSubOrderRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddSubOrderRequest[number], err)
}

func (x *AddSubOrderRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AddSubOrderRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TradeCreateRequest
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SubOrder = append(x.SubOrder, &v)
	return offset, nil
}

func (x *AddSubOrderResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddSubOrderResponse[number], err)
}

func (x *AddSubOrderResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *AddSubOrderResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v TradeOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TradeOrder = &v
	return offset, nil
}

func (x *QueryTradeOrderRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *QueryTradeOrderRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.OrderIdList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetOrderIdList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetOrderIdList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *QueryTradeOrderRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.BizOrderNoList) == 0 {
		return offset
	}
	for i := range x.GetBizOrderNoList() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetBizOrderNoList()[i])
	}
	return offset
}

func (x *QueryTradeOrderResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *QueryTradeOrderResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *QueryTradeOrderResponse) fastWriteField2(buf []byte) (offset int) {
	if x.TradeOrderList == nil {
		return offset
	}
	for i := range x.GetTradeOrderList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTradeOrderList()[i])
	}
	return offset
}

func (x *TradeCreateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	return offset
}

func (x *TradeCreateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.BizType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetBizType()))
	return offset
}

func (x *TradeCreateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.SaleWay == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetSaleWay()))
	return offset
}

func (x *TradeCreateRequest) fastWriteField3(buf []byte) (offset int) {
	if x.PaySequence == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetPaySequence()))
	return offset
}

func (x *TradeCreateRequest) fastWriteField4(buf []byte) (offset int) {
	if x.GoodsType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetGoodsType()))
	return offset
}

func (x *TradeCreateRequest) fastWriteField5(buf []byte) (offset int) {
	if x.BizStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetBizStatus())
	return offset
}

func (x *TradeCreateRequest) fastWriteField6(buf []byte) (offset int) {
	if x.BizOrderNo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetBizOrderNo())
	return offset
}

func (x *TradeCreateRequest) fastWriteField7(buf []byte) (offset int) {
	if x.BizId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetBizId())
	return offset
}

func (x *TradeCreateRequest) fastWriteField8(buf []byte) (offset int) {
	if x.Buyer == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 8, x.GetBuyer())
	return offset
}

func (x *TradeCreateRequest) fastWriteField9(buf []byte) (offset int) {
	if x.Seller == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 9, x.GetSeller())
	return offset
}

func (x *TradeCreateRequest) fastWriteField10(buf []byte) (offset int) {
	if x.PayType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 10, int32(x.GetPayType()))
	return offset
}

func (x *TradeCreateRequest) fastWriteField11(buf []byte) (offset int) {
	if x.PayableAmount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 11, x.GetPayableAmount())
	return offset
}

func (x *TradeCreateRequest) fastWriteField12(buf []byte) (offset int) {
	if len(x.Promotions) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 12, len(x.GetPromotions()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetPromotions()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *TradeCreateRequest) fastWriteField13(buf []byte) (offset int) {
	if x.DeliveryInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 13, x.GetDeliveryInfo())
	return offset
}

func (x *TradeCreateRequest) fastWriteField14(buf []byte) (offset int) {
	if x.DeliveryTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 14, x.GetDeliveryTime())
	return offset
}

func (x *TradeCreateRequest) fastWriteField15(buf []byte) (offset int) {
	if x.TimeoutInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 15, x.GetTimeoutInfo())
	return offset
}

func (x *TradeCreateRequest) fastWriteField16(buf []byte) (offset int) {
	if x.SubOrderList == nil {
		return offset
	}
	for i := range x.GetSubOrderList() {
		offset += fastpb.WriteMessage(buf[offset:], 16, x.GetSubOrderList()[i])
	}
	return offset
}

func (x *TradeCreateRequest) fastWriteField17(buf []byte) (offset int) {
	if x.Extra == nil {
		return offset
	}
	for k, v := range x.GetExtra() {
		offset += fastpb.WriteMapEntry(buf[offset:], 17,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *TradeCreateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *TradeCreateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *TradeCreateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.TradeOrder == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTradeOrder())
	return offset
}

func (x *MergeTradeRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MergeTradeRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OriginalOrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOriginalOrderId())
	return offset
}

func (x *MergeTradeRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.OrderIdList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 2, len(x.GetOrderIdList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetOrderIdList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *MergeTradeResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MergeTradeResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *MergeTradeResponse) fastWriteField2(buf []byte) (offset int) {
	if x.TradeOrder == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTradeOrder())
	return offset
}

func (x *UpdateExtendInfoRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateExtendInfoRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *UpdateExtendInfoRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Extra == nil {
		return offset
	}
	for k, v := range x.GetExtra() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *UpdateExtendInfoResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateExtendInfoResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *UpdateExtendInfoResponse) fastWriteField2(buf []byte) (offset int) {
	if x.TradeOrder == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTradeOrder())
	return offset
}

func (x *UpdateTradeOrderStatusRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *UpdateTradeOrderStatusRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *UpdateTradeOrderStatusRequest) fastWriteField2(buf []byte) (offset int) {
	if x.OrderStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetOrderStatus()))
	return offset
}

func (x *UpdateTradeOrderStatusRequest) fastWriteField3(buf []byte) (offset int) {
	if x.CloseType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetCloseType()))
	return offset
}

func (x *UpdateTradeOrderStatusRequest) fastWriteField4(buf []byte) (offset int) {
	if x.CloseReason == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCloseReason())
	return offset
}

func (x *UpdateTradeOrderStatusResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateTradeOrderStatusResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *UpdateTradeOrderStatusResponse) fastWriteField2(buf []byte) (offset int) {
	if x.TradeOrder == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTradeOrder())
	return offset
}

func (x *UpdateDeliveryInfoRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateDeliveryInfoRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *UpdateDeliveryInfoRequest) fastWriteField2(buf []byte) (offset int) {
	if x.DeliveryInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetDeliveryInfo())
	return offset
}

func (x *UpdateDeliveryInfoResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateDeliveryInfoResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *UpdateDeliveryInfoResponse) fastWriteField2(buf []byte) (offset int) {
	if x.TradeOrder == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTradeOrder())
	return offset
}

func (x *AddSubOrderRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AddSubOrderRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *AddSubOrderRequest) fastWriteField2(buf []byte) (offset int) {
	if x.SubOrder == nil {
		return offset
	}
	for i := range x.GetSubOrder() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetSubOrder()[i])
	}
	return offset
}

func (x *AddSubOrderResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AddSubOrderResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *AddSubOrderResponse) fastWriteField2(buf []byte) (offset int) {
	if x.TradeOrder == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTradeOrder())
	return offset
}

func (x *QueryTradeOrderRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *QueryTradeOrderRequest) sizeField1() (n int) {
	if len(x.OrderIdList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetOrderIdList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetOrderIdList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *QueryTradeOrderRequest) sizeField2() (n int) {
	if len(x.BizOrderNoList) == 0 {
		return n
	}
	for i := range x.GetBizOrderNoList() {
		n += fastpb.SizeString(2, x.GetBizOrderNoList()[i])
	}
	return n
}

func (x *QueryTradeOrderResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *QueryTradeOrderResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *QueryTradeOrderResponse) sizeField2() (n int) {
	if x.TradeOrderList == nil {
		return n
	}
	for i := range x.GetTradeOrderList() {
		n += fastpb.SizeMessage(2, x.GetTradeOrderList()[i])
	}
	return n
}

func (x *TradeCreateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	return n
}

func (x *TradeCreateRequest) sizeField1() (n int) {
	if x.BizType == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetBizType()))
	return n
}

func (x *TradeCreateRequest) sizeField2() (n int) {
	if x.SaleWay == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetSaleWay()))
	return n
}

func (x *TradeCreateRequest) sizeField3() (n int) {
	if x.PaySequence == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetPaySequence()))
	return n
}

func (x *TradeCreateRequest) sizeField4() (n int) {
	if x.GoodsType == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetGoodsType()))
	return n
}

func (x *TradeCreateRequest) sizeField5() (n int) {
	if x.BizStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetBizStatus())
	return n
}

func (x *TradeCreateRequest) sizeField6() (n int) {
	if x.BizOrderNo == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetBizOrderNo())
	return n
}

func (x *TradeCreateRequest) sizeField7() (n int) {
	if x.BizId == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetBizId())
	return n
}

func (x *TradeCreateRequest) sizeField8() (n int) {
	if x.Buyer == nil {
		return n
	}
	n += fastpb.SizeMessage(8, x.GetBuyer())
	return n
}

func (x *TradeCreateRequest) sizeField9() (n int) {
	if x.Seller == nil {
		return n
	}
	n += fastpb.SizeMessage(9, x.GetSeller())
	return n
}

func (x *TradeCreateRequest) sizeField10() (n int) {
	if x.PayType == 0 {
		return n
	}
	n += fastpb.SizeInt32(10, int32(x.GetPayType()))
	return n
}

func (x *TradeCreateRequest) sizeField11() (n int) {
	if x.PayableAmount == 0 {
		return n
	}
	n += fastpb.SizeUint64(11, x.GetPayableAmount())
	return n
}

func (x *TradeCreateRequest) sizeField12() (n int) {
	if len(x.Promotions) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(12, len(x.GetPromotions()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetPromotions()[numIdxOrVal])
			return n
		})
	return n
}

func (x *TradeCreateRequest) sizeField13() (n int) {
	if x.DeliveryInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(13, x.GetDeliveryInfo())
	return n
}

func (x *TradeCreateRequest) sizeField14() (n int) {
	if x.DeliveryTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(14, x.GetDeliveryTime())
	return n
}

func (x *TradeCreateRequest) sizeField15() (n int) {
	if x.TimeoutInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(15, x.GetTimeoutInfo())
	return n
}

func (x *TradeCreateRequest) sizeField16() (n int) {
	if x.SubOrderList == nil {
		return n
	}
	for i := range x.GetSubOrderList() {
		n += fastpb.SizeMessage(16, x.GetSubOrderList()[i])
	}
	return n
}

func (x *TradeCreateRequest) sizeField17() (n int) {
	if x.Extra == nil {
		return n
	}
	for k, v := range x.GetExtra() {
		n += fastpb.SizeMapEntry(17,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *TradeCreateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *TradeCreateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *TradeCreateResponse) sizeField2() (n int) {
	if x.TradeOrder == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTradeOrder())
	return n
}

func (x *MergeTradeRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MergeTradeRequest) sizeField1() (n int) {
	if x.OriginalOrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOriginalOrderId())
	return n
}

func (x *MergeTradeRequest) sizeField2() (n int) {
	if len(x.OrderIdList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(2, len(x.GetOrderIdList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetOrderIdList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *MergeTradeResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MergeTradeResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *MergeTradeResponse) sizeField2() (n int) {
	if x.TradeOrder == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTradeOrder())
	return n
}

func (x *UpdateExtendInfoRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateExtendInfoRequest) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *UpdateExtendInfoRequest) sizeField2() (n int) {
	if x.Extra == nil {
		return n
	}
	for k, v := range x.GetExtra() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *UpdateExtendInfoResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateExtendInfoResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *UpdateExtendInfoResponse) sizeField2() (n int) {
	if x.TradeOrder == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTradeOrder())
	return n
}

func (x *UpdateTradeOrderStatusRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *UpdateTradeOrderStatusRequest) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *UpdateTradeOrderStatusRequest) sizeField2() (n int) {
	if x.OrderStatus == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetOrderStatus()))
	return n
}

func (x *UpdateTradeOrderStatusRequest) sizeField3() (n int) {
	if x.CloseType == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetCloseType()))
	return n
}

func (x *UpdateTradeOrderStatusRequest) sizeField4() (n int) {
	if x.CloseReason == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetCloseReason())
	return n
}

func (x *UpdateTradeOrderStatusResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateTradeOrderStatusResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *UpdateTradeOrderStatusResponse) sizeField2() (n int) {
	if x.TradeOrder == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTradeOrder())
	return n
}

func (x *UpdateDeliveryInfoRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateDeliveryInfoRequest) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *UpdateDeliveryInfoRequest) sizeField2() (n int) {
	if x.DeliveryInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetDeliveryInfo())
	return n
}

func (x *UpdateDeliveryInfoResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateDeliveryInfoResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *UpdateDeliveryInfoResponse) sizeField2() (n int) {
	if x.TradeOrder == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTradeOrder())
	return n
}

func (x *AddSubOrderRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AddSubOrderRequest) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetOrderId())
	return n
}

func (x *AddSubOrderRequest) sizeField2() (n int) {
	if x.SubOrder == nil {
		return n
	}
	for i := range x.GetSubOrder() {
		n += fastpb.SizeMessage(2, x.GetSubOrder()[i])
	}
	return n
}

func (x *AddSubOrderResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AddSubOrderResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *AddSubOrderResponse) sizeField2() (n int) {
	if x.TradeOrder == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTradeOrder())
	return n
}

var fieldIDToName_QueryTradeOrderRequest = map[int32]string{
	1: "OrderIdList",
	2: "BizOrderNoList",
}

var fieldIDToName_QueryTradeOrderResponse = map[int32]string{
	1: "Meta",
	2: "TradeOrderList",
}

var fieldIDToName_TradeCreateRequest = map[int32]string{
	1:  "BizType",
	2:  "SaleWay",
	3:  "PaySequence",
	4:  "GoodsType",
	5:  "BizStatus",
	6:  "BizOrderNo",
	7:  "BizId",
	8:  "Buyer",
	9:  "Seller",
	10: "PayType",
	11: "PayableAmount",
	12: "Promotions",
	13: "DeliveryInfo",
	14: "DeliveryTime",
	15: "TimeoutInfo",
	16: "SubOrderList",
	17: "Extra",
}

var fieldIDToName_TradeCreateResponse = map[int32]string{
	1: "Meta",
	2: "TradeOrder",
}

var fieldIDToName_MergeTradeRequest = map[int32]string{
	1: "OriginalOrderId",
	2: "OrderIdList",
}

var fieldIDToName_MergeTradeResponse = map[int32]string{
	1: "Meta",
	2: "TradeOrder",
}

var fieldIDToName_UpdateExtendInfoRequest = map[int32]string{
	1: "OrderId",
	2: "Extra",
}

var fieldIDToName_UpdateExtendInfoResponse = map[int32]string{
	1: "Meta",
	2: "TradeOrder",
}

var fieldIDToName_UpdateTradeOrderStatusRequest = map[int32]string{
	1: "OrderId",
	2: "OrderStatus",
	3: "CloseType",
	4: "CloseReason",
}

var fieldIDToName_UpdateTradeOrderStatusResponse = map[int32]string{
	1: "Meta",
	2: "TradeOrder",
}

var fieldIDToName_UpdateDeliveryInfoRequest = map[int32]string{
	1: "OrderId",
	2: "DeliveryInfo",
}

var fieldIDToName_UpdateDeliveryInfoResponse = map[int32]string{
	1: "Meta",
	2: "TradeOrder",
}

var fieldIDToName_AddSubOrderRequest = map[int32]string{
	1: "OrderId",
	2: "SubOrder",
}

var fieldIDToName_AddSubOrderResponse = map[int32]string{
	1: "Meta",
	2: "TradeOrder",
}

var _ = validate.File_buf_validate_validate_proto
