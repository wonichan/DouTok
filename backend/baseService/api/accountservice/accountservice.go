// Code generated by Kitex v0.12.3. DO NOT EDIT.

package accountservice

import (
	api "DouTok-example/backend/baseService/kitex_gen/api"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newRegisterArgs,
		newRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CheckAccount": kitex.NewMethodInfo(
		checkAccountHandler,
		newCheckAccountArgs,
		newCheckAccountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Bind": kitex.NewMethodInfo(
		bindHandler,
		newBindArgs,
		newBindResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Unbind": kitex.NewMethodInfo(
		unbindHandler,
		newUnbindArgs,
		newUnbindResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	accountServiceServiceInfo                = NewServiceInfo()
	accountServiceServiceInfoForClient       = NewServiceInfoForClient()
	accountServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return accountServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return accountServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return accountServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AccountService"
	handlerType := (*api.AccountService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.RegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.AccountService).Register(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RegisterArgs:
		success, err := handler.(api.AccountService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *api.RegisterRequest
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.RegisterRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(api.RegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *api.RegisterRequest

func (p *RegisterArgs) GetReq() *api.RegisterRequest {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RegisterArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RegisterResult struct {
	Success *api.RegisterResponse
}

var RegisterResult_Success_DEFAULT *api.RegisterResponse

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.RegisterResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(api.RegisterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *api.RegisterResponse {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.RegisterResponse)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterResult) GetResult() interface{} {
	return p.Success
}

func checkAccountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.CheckAccountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.AccountService).CheckAccount(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckAccountArgs:
		success, err := handler.(api.AccountService).CheckAccount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckAccountResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckAccountArgs() interface{} {
	return &CheckAccountArgs{}
}

func newCheckAccountResult() interface{} {
	return &CheckAccountResult{}
}

type CheckAccountArgs struct {
	Req *api.CheckAccountRequest
}

func (p *CheckAccountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.CheckAccountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckAccountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckAccountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckAccountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckAccountArgs) Unmarshal(in []byte) error {
	msg := new(api.CheckAccountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckAccountArgs_Req_DEFAULT *api.CheckAccountRequest

func (p *CheckAccountArgs) GetReq() *api.CheckAccountRequest {
	if !p.IsSetReq() {
		return CheckAccountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckAccountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckAccountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckAccountResult struct {
	Success *api.CheckAccountResponse
}

var CheckAccountResult_Success_DEFAULT *api.CheckAccountResponse

func (p *CheckAccountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.CheckAccountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckAccountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckAccountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckAccountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckAccountResult) Unmarshal(in []byte) error {
	msg := new(api.CheckAccountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckAccountResult) GetSuccess() *api.CheckAccountResponse {
	if !p.IsSetSuccess() {
		return CheckAccountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckAccountResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.CheckAccountResponse)
}

func (p *CheckAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckAccountResult) GetResult() interface{} {
	return p.Success
}

func bindHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.BindRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.AccountService).Bind(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BindArgs:
		success, err := handler.(api.AccountService).Bind(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BindResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBindArgs() interface{} {
	return &BindArgs{}
}

func newBindResult() interface{} {
	return &BindResult{}
}

type BindArgs struct {
	Req *api.BindRequest
}

func (p *BindArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.BindRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BindArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BindArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BindArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BindArgs) Unmarshal(in []byte) error {
	msg := new(api.BindRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BindArgs_Req_DEFAULT *api.BindRequest

func (p *BindArgs) GetReq() *api.BindRequest {
	if !p.IsSetReq() {
		return BindArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BindArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BindArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BindResult struct {
	Success *api.BindResponse
}

var BindResult_Success_DEFAULT *api.BindResponse

func (p *BindResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.BindResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BindResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BindResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BindResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BindResult) Unmarshal(in []byte) error {
	msg := new(api.BindResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BindResult) GetSuccess() *api.BindResponse {
	if !p.IsSetSuccess() {
		return BindResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BindResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.BindResponse)
}

func (p *BindResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BindResult) GetResult() interface{} {
	return p.Success
}

func unbindHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.UnbindRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.AccountService).Unbind(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnbindArgs:
		success, err := handler.(api.AccountService).Unbind(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnbindResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnbindArgs() interface{} {
	return &UnbindArgs{}
}

func newUnbindResult() interface{} {
	return &UnbindResult{}
}

type UnbindArgs struct {
	Req *api.UnbindRequest
}

func (p *UnbindArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.UnbindRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UnbindArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UnbindArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UnbindArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnbindArgs) Unmarshal(in []byte) error {
	msg := new(api.UnbindRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnbindArgs_Req_DEFAULT *api.UnbindRequest

func (p *UnbindArgs) GetReq() *api.UnbindRequest {
	if !p.IsSetReq() {
		return UnbindArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnbindArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnbindArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnbindResult struct {
	Success *api.UnbindResponse
}

var UnbindResult_Success_DEFAULT *api.UnbindResponse

func (p *UnbindResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.UnbindResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UnbindResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UnbindResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UnbindResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnbindResult) Unmarshal(in []byte) error {
	msg := new(api.UnbindResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnbindResult) GetSuccess() *api.UnbindResponse {
	if !p.IsSetSuccess() {
		return UnbindResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnbindResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.UnbindResponse)
}

func (p *UnbindResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnbindResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, Req *api.RegisterRequest) (r *api.RegisterResponse, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckAccount(ctx context.Context, Req *api.CheckAccountRequest) (r *api.CheckAccountResponse, err error) {
	var _args CheckAccountArgs
	_args.Req = Req
	var _result CheckAccountResult
	if err = p.c.Call(ctx, "CheckAccount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Bind(ctx context.Context, Req *api.BindRequest) (r *api.BindResponse, err error) {
	var _args BindArgs
	_args.Req = Req
	var _result BindResult
	if err = p.c.Call(ctx, "Bind", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unbind(ctx context.Context, Req *api.UnbindRequest) (r *api.UnbindResponse, err error) {
	var _args UnbindArgs
	_args.Req = Req
	var _result UnbindResult
	if err = p.c.Call(ctx, "Unbind", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
