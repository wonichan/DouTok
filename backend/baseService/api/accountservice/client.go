// Code generated by Kitex v0.12.3. DO NOT EDIT.

package accountservice

import (
	api "DouTok-example/backend/baseService/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, Req *api.RegisterRequest, callOptions ...callopt.Option) (r *api.RegisterResponse, err error)
	CheckAccount(ctx context.Context, Req *api.CheckAccountRequest, callOptions ...callopt.Option) (r *api.CheckAccountResponse, err error)
	Bind(ctx context.Context, Req *api.BindRequest, callOptions ...callopt.Option) (r *api.BindResponse, err error)
	Unbind(ctx context.Context, Req *api.UnbindRequest, callOptions ...callopt.Option) (r *api.UnbindResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAccountServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAccountServiceClient struct {
	*kClient
}

func (p *kAccountServiceClient) Register(ctx context.Context, Req *api.RegisterRequest, callOptions ...callopt.Option) (r *api.RegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, Req)
}

func (p *kAccountServiceClient) CheckAccount(ctx context.Context, Req *api.CheckAccountRequest, callOptions ...callopt.Option) (r *api.CheckAccountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckAccount(ctx, Req)
}

func (p *kAccountServiceClient) Bind(ctx context.Context, Req *api.BindRequest, callOptions ...callopt.Option) (r *api.BindResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Bind(ctx, Req)
}

func (p *kAccountServiceClient) Unbind(ctx context.Context, Req *api.UnbindRequest, callOptions ...callopt.Option) (r *api.UnbindResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Unbind(ctx, Req)
}
