// Code generated by Kitex v0.12.3. DO NOT EDIT.

package promotionservice

import (
	api "DouTok-example/backend/baseService/kitex_gen/api"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PromotionCreate": kitex.NewMethodInfo(
		promotionCreateHandler,
		newPromotionCreateArgs,
		newPromotionCreateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"PromotionQuery": kitex.NewMethodInfo(
		promotionQueryHandler,
		newPromotionQueryArgs,
		newPromotionQueryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"PromotionUpdate": kitex.NewMethodInfo(
		promotionUpdateHandler,
		newPromotionUpdateArgs,
		newPromotionUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"PromotionDelete": kitex.NewMethodInfo(
		promotionDeleteHandler,
		newPromotionDeleteArgs,
		newPromotionDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateSpecificPromotion": kitex.NewMethodInfo(
		createSpecificPromotionHandler,
		newCreateSpecificPromotionArgs,
		newCreateSpecificPromotionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"QuerySpecificPromotion": kitex.NewMethodInfo(
		querySpecificPromotionHandler,
		newQuerySpecificPromotionArgs,
		newQuerySpecificPromotionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Calculate": kitex.NewMethodInfo(
		calculateHandler,
		newCalculateArgs,
		newCalculateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	promotionServiceServiceInfo                = NewServiceInfo()
	promotionServiceServiceInfoForClient       = NewServiceInfoForClient()
	promotionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return promotionServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return promotionServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return promotionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PromotionService"
	handlerType := (*api.PromotionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func promotionCreateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.PromotionCreateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PromotionService).PromotionCreate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PromotionCreateArgs:
		success, err := handler.(api.PromotionService).PromotionCreate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PromotionCreateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPromotionCreateArgs() interface{} {
	return &PromotionCreateArgs{}
}

func newPromotionCreateResult() interface{} {
	return &PromotionCreateResult{}
}

type PromotionCreateArgs struct {
	Req *api.PromotionCreateRequest
}

func (p *PromotionCreateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.PromotionCreateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PromotionCreateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PromotionCreateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PromotionCreateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PromotionCreateArgs) Unmarshal(in []byte) error {
	msg := new(api.PromotionCreateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PromotionCreateArgs_Req_DEFAULT *api.PromotionCreateRequest

func (p *PromotionCreateArgs) GetReq() *api.PromotionCreateRequest {
	if !p.IsSetReq() {
		return PromotionCreateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PromotionCreateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromotionCreateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PromotionCreateResult struct {
	Success *api.PromotionCreateResponse
}

var PromotionCreateResult_Success_DEFAULT *api.PromotionCreateResponse

func (p *PromotionCreateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.PromotionCreateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PromotionCreateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PromotionCreateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PromotionCreateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PromotionCreateResult) Unmarshal(in []byte) error {
	msg := new(api.PromotionCreateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PromotionCreateResult) GetSuccess() *api.PromotionCreateResponse {
	if !p.IsSetSuccess() {
		return PromotionCreateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PromotionCreateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.PromotionCreateResponse)
}

func (p *PromotionCreateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromotionCreateResult) GetResult() interface{} {
	return p.Success
}

func promotionQueryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.PromotionQueryRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PromotionService).PromotionQuery(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PromotionQueryArgs:
		success, err := handler.(api.PromotionService).PromotionQuery(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PromotionQueryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPromotionQueryArgs() interface{} {
	return &PromotionQueryArgs{}
}

func newPromotionQueryResult() interface{} {
	return &PromotionQueryResult{}
}

type PromotionQueryArgs struct {
	Req *api.PromotionQueryRequest
}

func (p *PromotionQueryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.PromotionQueryRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PromotionQueryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PromotionQueryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PromotionQueryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PromotionQueryArgs) Unmarshal(in []byte) error {
	msg := new(api.PromotionQueryRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PromotionQueryArgs_Req_DEFAULT *api.PromotionQueryRequest

func (p *PromotionQueryArgs) GetReq() *api.PromotionQueryRequest {
	if !p.IsSetReq() {
		return PromotionQueryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PromotionQueryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromotionQueryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PromotionQueryResult struct {
	Success *api.PromotionQueryResponse
}

var PromotionQueryResult_Success_DEFAULT *api.PromotionQueryResponse

func (p *PromotionQueryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.PromotionQueryResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PromotionQueryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PromotionQueryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PromotionQueryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PromotionQueryResult) Unmarshal(in []byte) error {
	msg := new(api.PromotionQueryResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PromotionQueryResult) GetSuccess() *api.PromotionQueryResponse {
	if !p.IsSetSuccess() {
		return PromotionQueryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PromotionQueryResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.PromotionQueryResponse)
}

func (p *PromotionQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromotionQueryResult) GetResult() interface{} {
	return p.Success
}

func promotionUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.PromotionUpdateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PromotionService).PromotionUpdate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PromotionUpdateArgs:
		success, err := handler.(api.PromotionService).PromotionUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PromotionUpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPromotionUpdateArgs() interface{} {
	return &PromotionUpdateArgs{}
}

func newPromotionUpdateResult() interface{} {
	return &PromotionUpdateResult{}
}

type PromotionUpdateArgs struct {
	Req *api.PromotionUpdateRequest
}

func (p *PromotionUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.PromotionUpdateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PromotionUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PromotionUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PromotionUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PromotionUpdateArgs) Unmarshal(in []byte) error {
	msg := new(api.PromotionUpdateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PromotionUpdateArgs_Req_DEFAULT *api.PromotionUpdateRequest

func (p *PromotionUpdateArgs) GetReq() *api.PromotionUpdateRequest {
	if !p.IsSetReq() {
		return PromotionUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PromotionUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromotionUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PromotionUpdateResult struct {
	Success *api.PromotionUpdateResponse
}

var PromotionUpdateResult_Success_DEFAULT *api.PromotionUpdateResponse

func (p *PromotionUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.PromotionUpdateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PromotionUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PromotionUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PromotionUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PromotionUpdateResult) Unmarshal(in []byte) error {
	msg := new(api.PromotionUpdateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PromotionUpdateResult) GetSuccess() *api.PromotionUpdateResponse {
	if !p.IsSetSuccess() {
		return PromotionUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PromotionUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.PromotionUpdateResponse)
}

func (p *PromotionUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromotionUpdateResult) GetResult() interface{} {
	return p.Success
}

func promotionDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.PromotionDeleteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PromotionService).PromotionDelete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PromotionDeleteArgs:
		success, err := handler.(api.PromotionService).PromotionDelete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PromotionDeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPromotionDeleteArgs() interface{} {
	return &PromotionDeleteArgs{}
}

func newPromotionDeleteResult() interface{} {
	return &PromotionDeleteResult{}
}

type PromotionDeleteArgs struct {
	Req *api.PromotionDeleteRequest
}

func (p *PromotionDeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.PromotionDeleteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PromotionDeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PromotionDeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PromotionDeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PromotionDeleteArgs) Unmarshal(in []byte) error {
	msg := new(api.PromotionDeleteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PromotionDeleteArgs_Req_DEFAULT *api.PromotionDeleteRequest

func (p *PromotionDeleteArgs) GetReq() *api.PromotionDeleteRequest {
	if !p.IsSetReq() {
		return PromotionDeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PromotionDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromotionDeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PromotionDeleteResult struct {
	Success *api.PromotionDeleteResponse
}

var PromotionDeleteResult_Success_DEFAULT *api.PromotionDeleteResponse

func (p *PromotionDeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.PromotionDeleteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PromotionDeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PromotionDeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PromotionDeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PromotionDeleteResult) Unmarshal(in []byte) error {
	msg := new(api.PromotionDeleteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PromotionDeleteResult) GetSuccess() *api.PromotionDeleteResponse {
	if !p.IsSetSuccess() {
		return PromotionDeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PromotionDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.PromotionDeleteResponse)
}

func (p *PromotionDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromotionDeleteResult) GetResult() interface{} {
	return p.Success
}

func createSpecificPromotionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.CreateSpecificPromotionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PromotionService).CreateSpecificPromotion(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateSpecificPromotionArgs:
		success, err := handler.(api.PromotionService).CreateSpecificPromotion(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateSpecificPromotionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateSpecificPromotionArgs() interface{} {
	return &CreateSpecificPromotionArgs{}
}

func newCreateSpecificPromotionResult() interface{} {
	return &CreateSpecificPromotionResult{}
}

type CreateSpecificPromotionArgs struct {
	Req *api.CreateSpecificPromotionRequest
}

func (p *CreateSpecificPromotionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.CreateSpecificPromotionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateSpecificPromotionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateSpecificPromotionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateSpecificPromotionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateSpecificPromotionArgs) Unmarshal(in []byte) error {
	msg := new(api.CreateSpecificPromotionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateSpecificPromotionArgs_Req_DEFAULT *api.CreateSpecificPromotionRequest

func (p *CreateSpecificPromotionArgs) GetReq() *api.CreateSpecificPromotionRequest {
	if !p.IsSetReq() {
		return CreateSpecificPromotionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateSpecificPromotionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateSpecificPromotionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateSpecificPromotionResult struct {
	Success *api.CreateSpecificPromotionResponse
}

var CreateSpecificPromotionResult_Success_DEFAULT *api.CreateSpecificPromotionResponse

func (p *CreateSpecificPromotionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.CreateSpecificPromotionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateSpecificPromotionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateSpecificPromotionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateSpecificPromotionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateSpecificPromotionResult) Unmarshal(in []byte) error {
	msg := new(api.CreateSpecificPromotionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateSpecificPromotionResult) GetSuccess() *api.CreateSpecificPromotionResponse {
	if !p.IsSetSuccess() {
		return CreateSpecificPromotionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateSpecificPromotionResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.CreateSpecificPromotionResponse)
}

func (p *CreateSpecificPromotionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateSpecificPromotionResult) GetResult() interface{} {
	return p.Success
}

func querySpecificPromotionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.QuerySpecificPromotionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PromotionService).QuerySpecificPromotion(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QuerySpecificPromotionArgs:
		success, err := handler.(api.PromotionService).QuerySpecificPromotion(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QuerySpecificPromotionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQuerySpecificPromotionArgs() interface{} {
	return &QuerySpecificPromotionArgs{}
}

func newQuerySpecificPromotionResult() interface{} {
	return &QuerySpecificPromotionResult{}
}

type QuerySpecificPromotionArgs struct {
	Req *api.QuerySpecificPromotionRequest
}

func (p *QuerySpecificPromotionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.QuerySpecificPromotionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QuerySpecificPromotionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QuerySpecificPromotionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QuerySpecificPromotionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QuerySpecificPromotionArgs) Unmarshal(in []byte) error {
	msg := new(api.QuerySpecificPromotionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QuerySpecificPromotionArgs_Req_DEFAULT *api.QuerySpecificPromotionRequest

func (p *QuerySpecificPromotionArgs) GetReq() *api.QuerySpecificPromotionRequest {
	if !p.IsSetReq() {
		return QuerySpecificPromotionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QuerySpecificPromotionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QuerySpecificPromotionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QuerySpecificPromotionResult struct {
	Success *api.QuerySpecificPromotionResponse
}

var QuerySpecificPromotionResult_Success_DEFAULT *api.QuerySpecificPromotionResponse

func (p *QuerySpecificPromotionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.QuerySpecificPromotionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QuerySpecificPromotionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QuerySpecificPromotionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QuerySpecificPromotionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QuerySpecificPromotionResult) Unmarshal(in []byte) error {
	msg := new(api.QuerySpecificPromotionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QuerySpecificPromotionResult) GetSuccess() *api.QuerySpecificPromotionResponse {
	if !p.IsSetSuccess() {
		return QuerySpecificPromotionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QuerySpecificPromotionResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.QuerySpecificPromotionResponse)
}

func (p *QuerySpecificPromotionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QuerySpecificPromotionResult) GetResult() interface{} {
	return p.Success
}

func calculateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.CalculateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.PromotionService).Calculate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CalculateArgs:
		success, err := handler.(api.PromotionService).Calculate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CalculateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCalculateArgs() interface{} {
	return &CalculateArgs{}
}

func newCalculateResult() interface{} {
	return &CalculateResult{}
}

type CalculateArgs struct {
	Req *api.CalculateRequest
}

func (p *CalculateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.CalculateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CalculateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CalculateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CalculateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CalculateArgs) Unmarshal(in []byte) error {
	msg := new(api.CalculateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CalculateArgs_Req_DEFAULT *api.CalculateRequest

func (p *CalculateArgs) GetReq() *api.CalculateRequest {
	if !p.IsSetReq() {
		return CalculateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CalculateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CalculateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CalculateResult struct {
	Success *api.CalculateResponse
}

var CalculateResult_Success_DEFAULT *api.CalculateResponse

func (p *CalculateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.CalculateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CalculateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CalculateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CalculateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CalculateResult) Unmarshal(in []byte) error {
	msg := new(api.CalculateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CalculateResult) GetSuccess() *api.CalculateResponse {
	if !p.IsSetSuccess() {
		return CalculateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CalculateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.CalculateResponse)
}

func (p *CalculateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CalculateResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PromotionCreate(ctx context.Context, Req *api.PromotionCreateRequest) (r *api.PromotionCreateResponse, err error) {
	var _args PromotionCreateArgs
	_args.Req = Req
	var _result PromotionCreateResult
	if err = p.c.Call(ctx, "PromotionCreate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PromotionQuery(ctx context.Context, Req *api.PromotionQueryRequest) (r *api.PromotionQueryResponse, err error) {
	var _args PromotionQueryArgs
	_args.Req = Req
	var _result PromotionQueryResult
	if err = p.c.Call(ctx, "PromotionQuery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PromotionUpdate(ctx context.Context, Req *api.PromotionUpdateRequest) (r *api.PromotionUpdateResponse, err error) {
	var _args PromotionUpdateArgs
	_args.Req = Req
	var _result PromotionUpdateResult
	if err = p.c.Call(ctx, "PromotionUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PromotionDelete(ctx context.Context, Req *api.PromotionDeleteRequest) (r *api.PromotionDeleteResponse, err error) {
	var _args PromotionDeleteArgs
	_args.Req = Req
	var _result PromotionDeleteResult
	if err = p.c.Call(ctx, "PromotionDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSpecificPromotion(ctx context.Context, Req *api.CreateSpecificPromotionRequest) (r *api.CreateSpecificPromotionResponse, err error) {
	var _args CreateSpecificPromotionArgs
	_args.Req = Req
	var _result CreateSpecificPromotionResult
	if err = p.c.Call(ctx, "CreateSpecificPromotion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QuerySpecificPromotion(ctx context.Context, Req *api.QuerySpecificPromotionRequest) (r *api.QuerySpecificPromotionResponse, err error) {
	var _args QuerySpecificPromotionArgs
	_args.Req = Req
	var _result QuerySpecificPromotionResult
	if err = p.c.Call(ctx, "QuerySpecificPromotion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Calculate(ctx context.Context, Req *api.CalculateRequest) (r *api.CalculateResponse, err error) {
	var _args CalculateArgs
	_args.Req = Req
	var _result CalculateResult
	if err = p.c.Call(ctx, "Calculate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
