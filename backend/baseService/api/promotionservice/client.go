// Code generated by Kitex v0.12.3. DO NOT EDIT.

package promotionservice

import (
	api "DouTok-example/backend/baseService/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	PromotionCreate(ctx context.Context, Req *api.PromotionCreateRequest, callOptions ...callopt.Option) (r *api.PromotionCreateResponse, err error)
	PromotionQuery(ctx context.Context, Req *api.PromotionQueryRequest, callOptions ...callopt.Option) (r *api.PromotionQueryResponse, err error)
	PromotionUpdate(ctx context.Context, Req *api.PromotionUpdateRequest, callOptions ...callopt.Option) (r *api.PromotionUpdateResponse, err error)
	PromotionDelete(ctx context.Context, Req *api.PromotionDeleteRequest, callOptions ...callopt.Option) (r *api.PromotionDeleteResponse, err error)
	CreateSpecificPromotion(ctx context.Context, Req *api.CreateSpecificPromotionRequest, callOptions ...callopt.Option) (r *api.CreateSpecificPromotionResponse, err error)
	QuerySpecificPromotion(ctx context.Context, Req *api.QuerySpecificPromotionRequest, callOptions ...callopt.Option) (r *api.QuerySpecificPromotionResponse, err error)
	Calculate(ctx context.Context, Req *api.CalculateRequest, callOptions ...callopt.Option) (r *api.CalculateResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPromotionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPromotionServiceClient struct {
	*kClient
}

func (p *kPromotionServiceClient) PromotionCreate(ctx context.Context, Req *api.PromotionCreateRequest, callOptions ...callopt.Option) (r *api.PromotionCreateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PromotionCreate(ctx, Req)
}

func (p *kPromotionServiceClient) PromotionQuery(ctx context.Context, Req *api.PromotionQueryRequest, callOptions ...callopt.Option) (r *api.PromotionQueryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PromotionQuery(ctx, Req)
}

func (p *kPromotionServiceClient) PromotionUpdate(ctx context.Context, Req *api.PromotionUpdateRequest, callOptions ...callopt.Option) (r *api.PromotionUpdateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PromotionUpdate(ctx, Req)
}

func (p *kPromotionServiceClient) PromotionDelete(ctx context.Context, Req *api.PromotionDeleteRequest, callOptions ...callopt.Option) (r *api.PromotionDeleteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PromotionDelete(ctx, Req)
}

func (p *kPromotionServiceClient) CreateSpecificPromotion(ctx context.Context, Req *api.CreateSpecificPromotionRequest, callOptions ...callopt.Option) (r *api.CreateSpecificPromotionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateSpecificPromotion(ctx, Req)
}

func (p *kPromotionServiceClient) QuerySpecificPromotion(ctx context.Context, Req *api.QuerySpecificPromotionRequest, callOptions ...callopt.Option) (r *api.QuerySpecificPromotionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QuerySpecificPromotion(ctx, Req)
}

func (p *kPromotionServiceClient) Calculate(ctx context.Context, Req *api.CalculateRequest, callOptions ...callopt.Option) (r *api.CalculateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Calculate(ctx, Req)
}
