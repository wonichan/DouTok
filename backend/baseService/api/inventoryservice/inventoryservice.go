// Code generated by Kitex v0.12.3. DO NOT EDIT.

package inventoryservice

import (
	api "DouTok-example/backend/baseService/kitex_gen/api"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateGoodInventory": kitex.NewMethodInfo(
		createGoodInventoryHandler,
		newCreateGoodInventoryArgs,
		newCreateGoodInventoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"QueryGoodsInventory": kitex.NewMethodInfo(
		queryGoodsInventoryHandler,
		newQueryGoodsInventoryArgs,
		newQueryGoodsInventoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateGoodsInventory": kitex.NewMethodInfo(
		updateGoodsInventoryHandler,
		newUpdateGoodsInventoryArgs,
		newUpdateGoodsInventoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Operate": kitex.NewMethodInfo(
		operateHandler,
		newOperateArgs,
		newOperateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	inventoryServiceServiceInfo                = NewServiceInfo()
	inventoryServiceServiceInfoForClient       = NewServiceInfoForClient()
	inventoryServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return inventoryServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return inventoryServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return inventoryServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InventoryService"
	handlerType := (*api.InventoryService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func createGoodInventoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.CreateGoodRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.InventoryService).CreateGoodInventory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateGoodInventoryArgs:
		success, err := handler.(api.InventoryService).CreateGoodInventory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateGoodInventoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateGoodInventoryArgs() interface{} {
	return &CreateGoodInventoryArgs{}
}

func newCreateGoodInventoryResult() interface{} {
	return &CreateGoodInventoryResult{}
}

type CreateGoodInventoryArgs struct {
	Req *api.CreateGoodRequest
}

func (p *CreateGoodInventoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.CreateGoodRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateGoodInventoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateGoodInventoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateGoodInventoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateGoodInventoryArgs) Unmarshal(in []byte) error {
	msg := new(api.CreateGoodRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateGoodInventoryArgs_Req_DEFAULT *api.CreateGoodRequest

func (p *CreateGoodInventoryArgs) GetReq() *api.CreateGoodRequest {
	if !p.IsSetReq() {
		return CreateGoodInventoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateGoodInventoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateGoodInventoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateGoodInventoryResult struct {
	Success *api.CreateGoodResponse
}

var CreateGoodInventoryResult_Success_DEFAULT *api.CreateGoodResponse

func (p *CreateGoodInventoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.CreateGoodResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateGoodInventoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateGoodInventoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateGoodInventoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateGoodInventoryResult) Unmarshal(in []byte) error {
	msg := new(api.CreateGoodResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateGoodInventoryResult) GetSuccess() *api.CreateGoodResponse {
	if !p.IsSetSuccess() {
		return CreateGoodInventoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateGoodInventoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.CreateGoodResponse)
}

func (p *CreateGoodInventoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateGoodInventoryResult) GetResult() interface{} {
	return p.Success
}

func queryGoodsInventoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.QueryGoodsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.InventoryService).QueryGoodsInventory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryGoodsInventoryArgs:
		success, err := handler.(api.InventoryService).QueryGoodsInventory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryGoodsInventoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryGoodsInventoryArgs() interface{} {
	return &QueryGoodsInventoryArgs{}
}

func newQueryGoodsInventoryResult() interface{} {
	return &QueryGoodsInventoryResult{}
}

type QueryGoodsInventoryArgs struct {
	Req *api.QueryGoodsRequest
}

func (p *QueryGoodsInventoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.QueryGoodsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryGoodsInventoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryGoodsInventoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryGoodsInventoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryGoodsInventoryArgs) Unmarshal(in []byte) error {
	msg := new(api.QueryGoodsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryGoodsInventoryArgs_Req_DEFAULT *api.QueryGoodsRequest

func (p *QueryGoodsInventoryArgs) GetReq() *api.QueryGoodsRequest {
	if !p.IsSetReq() {
		return QueryGoodsInventoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryGoodsInventoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryGoodsInventoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryGoodsInventoryResult struct {
	Success *api.QueryGoodsResponse
}

var QueryGoodsInventoryResult_Success_DEFAULT *api.QueryGoodsResponse

func (p *QueryGoodsInventoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.QueryGoodsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryGoodsInventoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryGoodsInventoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryGoodsInventoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryGoodsInventoryResult) Unmarshal(in []byte) error {
	msg := new(api.QueryGoodsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryGoodsInventoryResult) GetSuccess() *api.QueryGoodsResponse {
	if !p.IsSetSuccess() {
		return QueryGoodsInventoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryGoodsInventoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.QueryGoodsResponse)
}

func (p *QueryGoodsInventoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryGoodsInventoryResult) GetResult() interface{} {
	return p.Success
}

func updateGoodsInventoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.UpdateGoodsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.InventoryService).UpdateGoodsInventory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateGoodsInventoryArgs:
		success, err := handler.(api.InventoryService).UpdateGoodsInventory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateGoodsInventoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateGoodsInventoryArgs() interface{} {
	return &UpdateGoodsInventoryArgs{}
}

func newUpdateGoodsInventoryResult() interface{} {
	return &UpdateGoodsInventoryResult{}
}

type UpdateGoodsInventoryArgs struct {
	Req *api.UpdateGoodsRequest
}

func (p *UpdateGoodsInventoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.UpdateGoodsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateGoodsInventoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateGoodsInventoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateGoodsInventoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateGoodsInventoryArgs) Unmarshal(in []byte) error {
	msg := new(api.UpdateGoodsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateGoodsInventoryArgs_Req_DEFAULT *api.UpdateGoodsRequest

func (p *UpdateGoodsInventoryArgs) GetReq() *api.UpdateGoodsRequest {
	if !p.IsSetReq() {
		return UpdateGoodsInventoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateGoodsInventoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateGoodsInventoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateGoodsInventoryResult struct {
	Success *api.UpdateGoodsResponse
}

var UpdateGoodsInventoryResult_Success_DEFAULT *api.UpdateGoodsResponse

func (p *UpdateGoodsInventoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.UpdateGoodsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateGoodsInventoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateGoodsInventoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateGoodsInventoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateGoodsInventoryResult) Unmarshal(in []byte) error {
	msg := new(api.UpdateGoodsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateGoodsInventoryResult) GetSuccess() *api.UpdateGoodsResponse {
	if !p.IsSetSuccess() {
		return UpdateGoodsInventoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateGoodsInventoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.UpdateGoodsResponse)
}

func (p *UpdateGoodsInventoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateGoodsInventoryResult) GetResult() interface{} {
	return p.Success
}

func operateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.OperateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.InventoryService).Operate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *OperateArgs:
		success, err := handler.(api.InventoryService).Operate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*OperateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newOperateArgs() interface{} {
	return &OperateArgs{}
}

func newOperateResult() interface{} {
	return &OperateResult{}
}

type OperateArgs struct {
	Req *api.OperateRequest
}

func (p *OperateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.OperateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *OperateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *OperateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *OperateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *OperateArgs) Unmarshal(in []byte) error {
	msg := new(api.OperateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var OperateArgs_Req_DEFAULT *api.OperateRequest

func (p *OperateArgs) GetReq() *api.OperateRequest {
	if !p.IsSetReq() {
		return OperateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *OperateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OperateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type OperateResult struct {
	Success *api.OperateResponse
}

var OperateResult_Success_DEFAULT *api.OperateResponse

func (p *OperateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.OperateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *OperateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *OperateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *OperateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *OperateResult) Unmarshal(in []byte) error {
	msg := new(api.OperateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *OperateResult) GetSuccess() *api.OperateResponse {
	if !p.IsSetSuccess() {
		return OperateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *OperateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.OperateResponse)
}

func (p *OperateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OperateResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateGoodInventory(ctx context.Context, Req *api.CreateGoodRequest) (r *api.CreateGoodResponse, err error) {
	var _args CreateGoodInventoryArgs
	_args.Req = Req
	var _result CreateGoodInventoryResult
	if err = p.c.Call(ctx, "CreateGoodInventory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryGoodsInventory(ctx context.Context, Req *api.QueryGoodsRequest) (r *api.QueryGoodsResponse, err error) {
	var _args QueryGoodsInventoryArgs
	_args.Req = Req
	var _result QueryGoodsInventoryResult
	if err = p.c.Call(ctx, "QueryGoodsInventory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateGoodsInventory(ctx context.Context, Req *api.UpdateGoodsRequest) (r *api.UpdateGoodsResponse, err error) {
	var _args UpdateGoodsInventoryArgs
	_args.Req = Req
	var _result UpdateGoodsInventoryResult
	if err = p.c.Call(ctx, "UpdateGoodsInventory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Operate(ctx context.Context, Req *api.OperateRequest) (r *api.OperateResponse, err error) {
	var _args OperateArgs
	_args.Req = Req
	var _result OperateResult
	if err = p.c.Call(ctx, "Operate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
