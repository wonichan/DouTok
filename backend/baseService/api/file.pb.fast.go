// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	validate "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *FileContext) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FileContext[number], err)
}

func (x *FileContext) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Domain, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileContext) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BizName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileContext) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FileContext) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Hash, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileContext) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FileType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileContext) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Size, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FileContext) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.ExpireSeconds, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FileContext) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Filename, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PreSignGetRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PreSignGetRequest[number], err)
}

func (x *PreSignGetRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileContext
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileContext = &v
	return offset, nil
}

func (x *PreSignGetResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PreSignGetResponse[number], err)
}

func (x *PreSignGetResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *PreSignGetResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PreSignPutRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PreSignPutRequest[number], err)
}

func (x *PreSignPutRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileContext
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileContext = &v
	return offset, nil
}

func (x *PreSignPutResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PreSignPutResponse[number], err)
}

func (x *PreSignPutResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *PreSignPutResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PreSignPutResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ReportUploadedRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReportUploadedRequest[number], err)
}

func (x *ReportUploadedRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileContext
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileContext = &v
	return offset, nil
}

func (x *ReportUploadedResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReportUploadedResponse[number], err)
}

func (x *ReportUploadedResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *ReportUploadedResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PreSignSlicingPutRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PreSignSlicingPutRequest[number], err)
}

func (x *PreSignSlicingPutRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileContext
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileContext = &v
	return offset, nil
}

func (x *PreSignSlicingPutResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PreSignSlicingPutResponse[number], err)
}

func (x *PreSignSlicingPutResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *PreSignSlicingPutResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Urls = append(x.Urls, v)
	return offset, err
}

func (x *PreSignSlicingPutResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UploadId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PreSignSlicingPutResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Parts, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PreSignSlicingPutResponse) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PreSignSlicingPutResponse) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Uploaded, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetProgressRate4SlicingPutRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProgressRate4SlicingPutRequest[number], err)
}

func (x *GetProgressRate4SlicingPutRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileContext
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileContext = &v
	return offset, nil
}

func (x *GetProgressRate4SlicingPutRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UploadId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetProgressRate4SlicingPutResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProgressRate4SlicingPutResponse[number], err)
}

func (x *GetProgressRate4SlicingPutResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *GetProgressRate4SlicingPutResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProgressRate, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *GetProgressRate4SlicingPutResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	if x.Parts == nil {
		x.Parts = make(map[string]bool)
	}
	var key string
	var value bool
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadBool(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Parts[key] = value
	return offset, nil
}

func (x *ReportUploadedFilePartsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReportUploadedFilePartsRequest[number], err)
}

func (x *ReportUploadedFilePartsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UploadId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ReportUploadedFilePartsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ReportUploadedFilePartsRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PartNumber, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ReportUploadedFilePartsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReportUploadedFilePartsResponse[number], err)
}

func (x *ReportUploadedFilePartsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *MergeFilePartsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MergeFilePartsRequest[number], err)
}

func (x *MergeFilePartsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileContext
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileContext = &v
	return offset, nil
}

func (x *MergeFilePartsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UploadId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MergeFilePartsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MergeFilePartsResponse[number], err)
}

func (x *MergeFilePartsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *RemoveFileRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RemoveFileRequest[number], err)
}

func (x *RemoveFileRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileContext
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileContext = &v
	return offset, nil
}

func (x *RemoveFileResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RemoveFileResponse[number], err)
}

func (x *RemoveFileResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *GetFileInfoByIdRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoByIdRequest[number], err)
}

func (x *GetFileInfoByIdRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFileInfoByIdRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.DomainName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoByIdRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.BizName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoByIdResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoByIdResponse[number], err)
}

func (x *GetFileInfoByIdResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *GetFileInfoByIdResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ObjectName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoByIdResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Hash, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileContext) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *FileContext) fastWriteField1(buf []byte) (offset int) {
	if x.Domain == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetDomain())
	return offset
}

func (x *FileContext) fastWriteField2(buf []byte) (offset int) {
	if x.BizName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetBizName())
	return offset
}

func (x *FileContext) fastWriteField3(buf []byte) (offset int) {
	if x.FileId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetFileId())
	return offset
}

func (x *FileContext) fastWriteField4(buf []byte) (offset int) {
	if x.Hash == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetHash())
	return offset
}

func (x *FileContext) fastWriteField5(buf []byte) (offset int) {
	if x.FileType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetFileType())
	return offset
}

func (x *FileContext) fastWriteField6(buf []byte) (offset int) {
	if x.Size == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetSize())
	return offset
}

func (x *FileContext) fastWriteField7(buf []byte) (offset int) {
	if x.ExpireSeconds == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetExpireSeconds())
	return offset
}

func (x *FileContext) fastWriteField8(buf []byte) (offset int) {
	if x.Filename == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetFilename())
	return offset
}

func (x *PreSignGetRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PreSignGetRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileContext == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFileContext())
	return offset
}

func (x *PreSignGetResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PreSignGetResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *PreSignGetResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUrl())
	return offset
}

func (x *PreSignPutRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PreSignPutRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileContext == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFileContext())
	return offset
}

func (x *PreSignPutResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PreSignPutResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *PreSignPutResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUrl())
	return offset
}

func (x *PreSignPutResponse) fastWriteField3(buf []byte) (offset int) {
	if x.FileId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetFileId())
	return offset
}

func (x *ReportUploadedRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ReportUploadedRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileContext == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFileContext())
	return offset
}

func (x *ReportUploadedResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ReportUploadedResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *ReportUploadedResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUrl())
	return offset
}

func (x *PreSignSlicingPutRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PreSignSlicingPutRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileContext == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFileContext())
	return offset
}

func (x *PreSignSlicingPutResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *PreSignSlicingPutResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *PreSignSlicingPutResponse) fastWriteField2(buf []byte) (offset int) {
	if len(x.Urls) == 0 {
		return offset
	}
	for i := range x.GetUrls() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetUrls()[i])
	}
	return offset
}

func (x *PreSignSlicingPutResponse) fastWriteField3(buf []byte) (offset int) {
	if x.UploadId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUploadId())
	return offset
}

func (x *PreSignSlicingPutResponse) fastWriteField4(buf []byte) (offset int) {
	if x.Parts == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetParts())
	return offset
}

func (x *PreSignSlicingPutResponse) fastWriteField5(buf []byte) (offset int) {
	if x.FileId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetFileId())
	return offset
}

func (x *PreSignSlicingPutResponse) fastWriteField6(buf []byte) (offset int) {
	if !x.Uploaded {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 6, x.GetUploaded())
	return offset
}

func (x *GetProgressRate4SlicingPutRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetProgressRate4SlicingPutRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileContext == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFileContext())
	return offset
}

func (x *GetProgressRate4SlicingPutRequest) fastWriteField2(buf []byte) (offset int) {
	if x.UploadId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUploadId())
	return offset
}

func (x *GetProgressRate4SlicingPutResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetProgressRate4SlicingPutResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *GetProgressRate4SlicingPutResponse) fastWriteField2(buf []byte) (offset int) {
	if x.ProgressRate == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 2, x.GetProgressRate())
	return offset
}

func (x *GetProgressRate4SlicingPutResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Parts == nil {
		return offset
	}
	for k, v := range x.GetParts() {
		offset += fastpb.WriteMapEntry(buf[offset:], 3,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteBool(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *ReportUploadedFilePartsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ReportUploadedFilePartsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UploadId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUploadId())
	return offset
}

func (x *ReportUploadedFilePartsRequest) fastWriteField2(buf []byte) (offset int) {
	if x.FileId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetFileId())
	return offset
}

func (x *ReportUploadedFilePartsRequest) fastWriteField3(buf []byte) (offset int) {
	if x.PartNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetPartNumber())
	return offset
}

func (x *ReportUploadedFilePartsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ReportUploadedFilePartsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *MergeFilePartsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MergeFilePartsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileContext == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFileContext())
	return offset
}

func (x *MergeFilePartsRequest) fastWriteField2(buf []byte) (offset int) {
	if x.UploadId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUploadId())
	return offset
}

func (x *MergeFilePartsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MergeFilePartsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *RemoveFileRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RemoveFileRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileContext == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFileContext())
	return offset
}

func (x *RemoveFileResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RemoveFileResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *GetFileInfoByIdRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileInfoByIdRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *GetFileInfoByIdRequest) fastWriteField2(buf []byte) (offset int) {
	if x.DomainName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetDomainName())
	return offset
}

func (x *GetFileInfoByIdRequest) fastWriteField3(buf []byte) (offset int) {
	if x.BizName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetBizName())
	return offset
}

func (x *GetFileInfoByIdResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileInfoByIdResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *GetFileInfoByIdResponse) fastWriteField2(buf []byte) (offset int) {
	if x.ObjectName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetObjectName())
	return offset
}

func (x *GetFileInfoByIdResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Hash == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetHash())
	return offset
}

func (x *FileContext) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *FileContext) sizeField1() (n int) {
	if x.Domain == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetDomain())
	return n
}

func (x *FileContext) sizeField2() (n int) {
	if x.BizName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetBizName())
	return n
}

func (x *FileContext) sizeField3() (n int) {
	if x.FileId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetFileId())
	return n
}

func (x *FileContext) sizeField4() (n int) {
	if x.Hash == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetHash())
	return n
}

func (x *FileContext) sizeField5() (n int) {
	if x.FileType == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetFileType())
	return n
}

func (x *FileContext) sizeField6() (n int) {
	if x.Size == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetSize())
	return n
}

func (x *FileContext) sizeField7() (n int) {
	if x.ExpireSeconds == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetExpireSeconds())
	return n
}

func (x *FileContext) sizeField8() (n int) {
	if x.Filename == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetFilename())
	return n
}

func (x *PreSignGetRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PreSignGetRequest) sizeField1() (n int) {
	if x.FileContext == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFileContext())
	return n
}

func (x *PreSignGetResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PreSignGetResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *PreSignGetResponse) sizeField2() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUrl())
	return n
}

func (x *PreSignPutRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PreSignPutRequest) sizeField1() (n int) {
	if x.FileContext == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFileContext())
	return n
}

func (x *PreSignPutResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PreSignPutResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *PreSignPutResponse) sizeField2() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUrl())
	return n
}

func (x *PreSignPutResponse) sizeField3() (n int) {
	if x.FileId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetFileId())
	return n
}

func (x *ReportUploadedRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ReportUploadedRequest) sizeField1() (n int) {
	if x.FileContext == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFileContext())
	return n
}

func (x *ReportUploadedResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ReportUploadedResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *ReportUploadedResponse) sizeField2() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUrl())
	return n
}

func (x *PreSignSlicingPutRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PreSignSlicingPutRequest) sizeField1() (n int) {
	if x.FileContext == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFileContext())
	return n
}

func (x *PreSignSlicingPutResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *PreSignSlicingPutResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *PreSignSlicingPutResponse) sizeField2() (n int) {
	if len(x.Urls) == 0 {
		return n
	}
	for i := range x.GetUrls() {
		n += fastpb.SizeString(2, x.GetUrls()[i])
	}
	return n
}

func (x *PreSignSlicingPutResponse) sizeField3() (n int) {
	if x.UploadId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUploadId())
	return n
}

func (x *PreSignSlicingPutResponse) sizeField4() (n int) {
	if x.Parts == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetParts())
	return n
}

func (x *PreSignSlicingPutResponse) sizeField5() (n int) {
	if x.FileId == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetFileId())
	return n
}

func (x *PreSignSlicingPutResponse) sizeField6() (n int) {
	if !x.Uploaded {
		return n
	}
	n += fastpb.SizeBool(6, x.GetUploaded())
	return n
}

func (x *GetProgressRate4SlicingPutRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetProgressRate4SlicingPutRequest) sizeField1() (n int) {
	if x.FileContext == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFileContext())
	return n
}

func (x *GetProgressRate4SlicingPutRequest) sizeField2() (n int) {
	if x.UploadId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUploadId())
	return n
}

func (x *GetProgressRate4SlicingPutResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetProgressRate4SlicingPutResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *GetProgressRate4SlicingPutResponse) sizeField2() (n int) {
	if x.ProgressRate == 0 {
		return n
	}
	n += fastpb.SizeFloat(2, x.GetProgressRate())
	return n
}

func (x *GetProgressRate4SlicingPutResponse) sizeField3() (n int) {
	if x.Parts == nil {
		return n
	}
	for k, v := range x.GetParts() {
		n += fastpb.SizeMapEntry(3,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeBool(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *ReportUploadedFilePartsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ReportUploadedFilePartsRequest) sizeField1() (n int) {
	if x.UploadId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUploadId())
	return n
}

func (x *ReportUploadedFilePartsRequest) sizeField2() (n int) {
	if x.FileId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetFileId())
	return n
}

func (x *ReportUploadedFilePartsRequest) sizeField3() (n int) {
	if x.PartNumber == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetPartNumber())
	return n
}

func (x *ReportUploadedFilePartsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ReportUploadedFilePartsResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *MergeFilePartsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MergeFilePartsRequest) sizeField1() (n int) {
	if x.FileContext == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFileContext())
	return n
}

func (x *MergeFilePartsRequest) sizeField2() (n int) {
	if x.UploadId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUploadId())
	return n
}

func (x *MergeFilePartsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MergeFilePartsResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *RemoveFileRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RemoveFileRequest) sizeField1() (n int) {
	if x.FileContext == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFileContext())
	return n
}

func (x *RemoveFileResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RemoveFileResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *GetFileInfoByIdRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileInfoByIdRequest) sizeField1() (n int) {
	if x.FileId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetFileId())
	return n
}

func (x *GetFileInfoByIdRequest) sizeField2() (n int) {
	if x.DomainName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetDomainName())
	return n
}

func (x *GetFileInfoByIdRequest) sizeField3() (n int) {
	if x.BizName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetBizName())
	return n
}

func (x *GetFileInfoByIdResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileInfoByIdResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *GetFileInfoByIdResponse) sizeField2() (n int) {
	if x.ObjectName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetObjectName())
	return n
}

func (x *GetFileInfoByIdResponse) sizeField3() (n int) {
	if x.Hash == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetHash())
	return n
}

var fieldIDToName_FileContext = map[int32]string{
	1: "Domain",
	2: "BizName",
	3: "FileId",
	4: "Hash",
	5: "FileType",
	6: "Size",
	7: "ExpireSeconds",
	8: "Filename",
}

var fieldIDToName_PreSignGetRequest = map[int32]string{
	1: "FileContext",
}

var fieldIDToName_PreSignGetResponse = map[int32]string{
	1: "Meta",
	2: "Url",
}

var fieldIDToName_PreSignPutRequest = map[int32]string{
	1: "FileContext",
}

var fieldIDToName_PreSignPutResponse = map[int32]string{
	1: "Meta",
	2: "Url",
	3: "FileId",
}

var fieldIDToName_ReportUploadedRequest = map[int32]string{
	1: "FileContext",
}

var fieldIDToName_ReportUploadedResponse = map[int32]string{
	1: "Meta",
	2: "Url",
}

var fieldIDToName_PreSignSlicingPutRequest = map[int32]string{
	1: "FileContext",
}

var fieldIDToName_PreSignSlicingPutResponse = map[int32]string{
	1: "Meta",
	2: "Urls",
	3: "UploadId",
	4: "Parts",
	5: "FileId",
	6: "Uploaded",
}

var fieldIDToName_GetProgressRate4SlicingPutRequest = map[int32]string{
	1: "FileContext",
	2: "UploadId",
}

var fieldIDToName_GetProgressRate4SlicingPutResponse = map[int32]string{
	1: "Meta",
	2: "ProgressRate",
	3: "Parts",
}

var fieldIDToName_ReportUploadedFilePartsRequest = map[int32]string{
	1: "UploadId",
	2: "FileId",
	3: "PartNumber",
}

var fieldIDToName_ReportUploadedFilePartsResponse = map[int32]string{
	1: "Meta",
}

var fieldIDToName_MergeFilePartsRequest = map[int32]string{
	1: "FileContext",
	2: "UploadId",
}

var fieldIDToName_MergeFilePartsResponse = map[int32]string{
	1: "Meta",
}

var fieldIDToName_RemoveFileRequest = map[int32]string{
	1: "FileContext",
}

var fieldIDToName_RemoveFileResponse = map[int32]string{
	1: "Meta",
}

var fieldIDToName_GetFileInfoByIdRequest = map[int32]string{
	1: "FileId",
	2: "DomainName",
	3: "BizName",
}

var fieldIDToName_GetFileInfoByIdResponse = map[int32]string{
	1: "Meta",
	2: "ObjectName",
	3: "Hash",
}

var _ = validate.File_buf_validate_validate_proto
