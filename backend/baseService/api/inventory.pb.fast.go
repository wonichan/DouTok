// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	validate "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *InventoryGood) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_InventoryGood[number], err)
}

func (x *InventoryGood) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *InventoryGood) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BizId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *InventoryGood) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *InventoryGood) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *InventoryGood) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Quantity, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Inventory) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Inventory[number], err)
}

func (x *Inventory) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Inventory) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OccupyType = OccupyType(v)
	return offset, nil
}

func (x *Inventory) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OperateType = OperateType(v)
	return offset, nil
}

func (x *Inventory) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.InventoryStatus = InventoryStatus(v)
	return offset, nil
}

func (x *Inventory) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.BizId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Inventory) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Inventory) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Inventory) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Inventory) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Buffer, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Inventory) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.ActualReleaseTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateGoodRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateGoodRequest[number], err)
}

func (x *CreateGoodRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BizId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateGoodRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Quantity, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *CreateGoodRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateGoodRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateGoodResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateGoodResponse[number], err)
}

func (x *CreateGoodResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *CreateGoodResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v InventoryGood
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.InventoryGood = &v
	return offset, nil
}

func (x *QueryGoodsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryGoodsRequest[number], err)
}

func (x *QueryGoodsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.BizIdList = append(x.BizIdList, v)
			return offset, err
		})
	return offset, err
}

func (x *QueryGoodsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.IdList = append(x.IdList, v)
			return offset, err
		})
	return offset, err
}

func (x *QueryGoodsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryGoodsResponse[number], err)
}

func (x *QueryGoodsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *QueryGoodsResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v InventoryGood
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.InventoryGoodList = append(x.InventoryGoodList, &v)
	return offset, nil
}

func (x *UpdateGoodsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateGoodsRequest[number], err)
}

func (x *UpdateGoodsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateGoodsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Quantity, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UpdateGoodsRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.UpdateGoodsType = UpdateGoodsType(v)
	return offset, nil
}

func (x *UpdateGoodsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateGoodsResponse[number], err)
}

func (x *UpdateGoodsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *UpdateGoodsResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v InventoryGood
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.InventoryGood = &v
	return offset, nil
}

func (x *OperateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OperateRequest[number], err)
}

func (x *OperateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OperateType = OperateType(v)
	return offset, nil
}

func (x *OperateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OccupyType = OccupyType(v)
	return offset, nil
}

func (x *OperateRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.InventoryGoodId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OperateRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BizId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OperateRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OperateRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OperateRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Buffer, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OperateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OperateResponse[number], err)
}

func (x *OperateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *InventoryGood) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *InventoryGood) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *InventoryGood) fastWriteField2(buf []byte) (offset int) {
	if x.BizId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetBizId())
	return offset
}

func (x *InventoryGood) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *InventoryGood) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *InventoryGood) fastWriteField5(buf []byte) (offset int) {
	if x.Quantity == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 5, x.GetQuantity())
	return offset
}

func (x *Inventory) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *Inventory) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Inventory) fastWriteField2(buf []byte) (offset int) {
	if x.OccupyType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetOccupyType()))
	return offset
}

func (x *Inventory) fastWriteField3(buf []byte) (offset int) {
	if x.OperateType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetOperateType()))
	return offset
}

func (x *Inventory) fastWriteField4(buf []byte) (offset int) {
	if x.InventoryStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetInventoryStatus()))
	return offset
}

func (x *Inventory) fastWriteField5(buf []byte) (offset int) {
	if x.BizId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetBizId())
	return offset
}

func (x *Inventory) fastWriteField6(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCreateTime())
	return offset
}

func (x *Inventory) fastWriteField7(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetStartTime())
	return offset
}

func (x *Inventory) fastWriteField8(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetEndTime())
	return offset
}

func (x *Inventory) fastWriteField9(buf []byte) (offset int) {
	if x.Buffer == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetBuffer())
	return offset
}

func (x *Inventory) fastWriteField10(buf []byte) (offset int) {
	if x.ActualReleaseTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetActualReleaseTime())
	return offset
}

func (x *CreateGoodRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CreateGoodRequest) fastWriteField1(buf []byte) (offset int) {
	if x.BizId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetBizId())
	return offset
}

func (x *CreateGoodRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Quantity == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetQuantity())
	return offset
}

func (x *CreateGoodRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *CreateGoodRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *CreateGoodResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateGoodResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *CreateGoodResponse) fastWriteField2(buf []byte) (offset int) {
	if x.InventoryGood == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetInventoryGood())
	return offset
}

func (x *QueryGoodsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *QueryGoodsRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.BizIdList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetBizIdList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetBizIdList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *QueryGoodsRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.IdList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 2, len(x.GetIdList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetIdList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *QueryGoodsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *QueryGoodsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *QueryGoodsResponse) fastWriteField2(buf []byte) (offset int) {
	if x.InventoryGoodList == nil {
		return offset
	}
	for i := range x.GetInventoryGoodList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetInventoryGoodList()[i])
	}
	return offset
}

func (x *UpdateGoodsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UpdateGoodsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateGoodsRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Quantity == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetQuantity())
	return offset
}

func (x *UpdateGoodsRequest) fastWriteField3(buf []byte) (offset int) {
	if x.UpdateGoodsType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetUpdateGoodsType()))
	return offset
}

func (x *UpdateGoodsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateGoodsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *UpdateGoodsResponse) fastWriteField2(buf []byte) (offset int) {
	if x.InventoryGood == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetInventoryGood())
	return offset
}

func (x *OperateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *OperateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OperateType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetOperateType()))
	return offset
}

func (x *OperateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.OccupyType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetOccupyType()))
	return offset
}

func (x *OperateRequest) fastWriteField3(buf []byte) (offset int) {
	if x.InventoryGoodId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetInventoryGoodId())
	return offset
}

func (x *OperateRequest) fastWriteField4(buf []byte) (offset int) {
	if x.BizId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetBizId())
	return offset
}

func (x *OperateRequest) fastWriteField5(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetStartTime())
	return offset
}

func (x *OperateRequest) fastWriteField6(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetEndTime())
	return offset
}

func (x *OperateRequest) fastWriteField7(buf []byte) (offset int) {
	if x.Buffer == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetBuffer())
	return offset
}

func (x *OperateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *OperateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *InventoryGood) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *InventoryGood) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *InventoryGood) sizeField2() (n int) {
	if x.BizId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetBizId())
	return n
}

func (x *InventoryGood) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *InventoryGood) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *InventoryGood) sizeField5() (n int) {
	if x.Quantity == 0 {
		return n
	}
	n += fastpb.SizeUint64(5, x.GetQuantity())
	return n
}

func (x *Inventory) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *Inventory) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Inventory) sizeField2() (n int) {
	if x.OccupyType == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetOccupyType()))
	return n
}

func (x *Inventory) sizeField3() (n int) {
	if x.OperateType == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetOperateType()))
	return n
}

func (x *Inventory) sizeField4() (n int) {
	if x.InventoryStatus == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetInventoryStatus()))
	return n
}

func (x *Inventory) sizeField5() (n int) {
	if x.BizId == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetBizId())
	return n
}

func (x *Inventory) sizeField6() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCreateTime())
	return n
}

func (x *Inventory) sizeField7() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetStartTime())
	return n
}

func (x *Inventory) sizeField8() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetEndTime())
	return n
}

func (x *Inventory) sizeField9() (n int) {
	if x.Buffer == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetBuffer())
	return n
}

func (x *Inventory) sizeField10() (n int) {
	if x.ActualReleaseTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetActualReleaseTime())
	return n
}

func (x *CreateGoodRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CreateGoodRequest) sizeField1() (n int) {
	if x.BizId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetBizId())
	return n
}

func (x *CreateGoodRequest) sizeField2() (n int) {
	if x.Quantity == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetQuantity())
	return n
}

func (x *CreateGoodRequest) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *CreateGoodRequest) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *CreateGoodResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateGoodResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *CreateGoodResponse) sizeField2() (n int) {
	if x.InventoryGood == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetInventoryGood())
	return n
}

func (x *QueryGoodsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *QueryGoodsRequest) sizeField1() (n int) {
	if len(x.BizIdList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetBizIdList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetBizIdList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *QueryGoodsRequest) sizeField2() (n int) {
	if len(x.IdList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(2, len(x.GetIdList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetIdList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *QueryGoodsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *QueryGoodsResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *QueryGoodsResponse) sizeField2() (n int) {
	if x.InventoryGoodList == nil {
		return n
	}
	for i := range x.GetInventoryGoodList() {
		n += fastpb.SizeMessage(2, x.GetInventoryGoodList()[i])
	}
	return n
}

func (x *UpdateGoodsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UpdateGoodsRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UpdateGoodsRequest) sizeField2() (n int) {
	if x.Quantity == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetQuantity())
	return n
}

func (x *UpdateGoodsRequest) sizeField3() (n int) {
	if x.UpdateGoodsType == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetUpdateGoodsType()))
	return n
}

func (x *UpdateGoodsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateGoodsResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *UpdateGoodsResponse) sizeField2() (n int) {
	if x.InventoryGood == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetInventoryGood())
	return n
}

func (x *OperateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *OperateRequest) sizeField1() (n int) {
	if x.OperateType == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetOperateType()))
	return n
}

func (x *OperateRequest) sizeField2() (n int) {
	if x.OccupyType == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetOccupyType()))
	return n
}

func (x *OperateRequest) sizeField3() (n int) {
	if x.InventoryGoodId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetInventoryGoodId())
	return n
}

func (x *OperateRequest) sizeField4() (n int) {
	if x.BizId == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetBizId())
	return n
}

func (x *OperateRequest) sizeField5() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetStartTime())
	return n
}

func (x *OperateRequest) sizeField6() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetEndTime())
	return n
}

func (x *OperateRequest) sizeField7() (n int) {
	if x.Buffer == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetBuffer())
	return n
}

func (x *OperateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *OperateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

var fieldIDToName_InventoryGood = map[int32]string{
	1: "Id",
	2: "BizId",
	3: "Name",
	4: "Description",
	5: "Quantity",
}

var fieldIDToName_Inventory = map[int32]string{
	1:  "Id",
	2:  "OccupyType",
	3:  "OperateType",
	4:  "InventoryStatus",
	5:  "BizId",
	6:  "CreateTime",
	7:  "StartTime",
	8:  "EndTime",
	9:  "Buffer",
	10: "ActualReleaseTime",
}

var fieldIDToName_CreateGoodRequest = map[int32]string{
	1: "BizId",
	2: "Quantity",
	3: "Name",
	4: "Description",
}

var fieldIDToName_CreateGoodResponse = map[int32]string{
	1: "Meta",
	2: "InventoryGood",
}

var fieldIDToName_QueryGoodsRequest = map[int32]string{
	1: "BizIdList",
	2: "IdList",
}

var fieldIDToName_QueryGoodsResponse = map[int32]string{
	1: "Meta",
	2: "InventoryGoodList",
}

var fieldIDToName_UpdateGoodsRequest = map[int32]string{
	1: "Id",
	2: "Quantity",
	3: "UpdateGoodsType",
}

var fieldIDToName_UpdateGoodsResponse = map[int32]string{
	1: "Meta",
	2: "InventoryGood",
}

var fieldIDToName_OperateRequest = map[int32]string{
	1: "OperateType",
	2: "OccupyType",
	3: "InventoryGoodId",
	4: "BizId",
	5: "StartTime",
	6: "EndTime",
	7: "Buffer",
}

var fieldIDToName_OperateResponse = map[int32]string{
	1: "Meta",
}

var _ = validate.File_buf_validate_validate_proto
