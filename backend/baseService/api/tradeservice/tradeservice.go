// Code generated by Kitex v0.12.3. DO NOT EDIT.

package tradeservice

import (
	api "DouTok-example/backend/baseService/kitex_gen/api"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"QueryTradeOrder": kitex.NewMethodInfo(
		queryTradeOrderHandler,
		newQueryTradeOrderArgs,
		newQueryTradeOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"TradeCreate": kitex.NewMethodInfo(
		tradeCreateHandler,
		newTradeCreateArgs,
		newTradeCreateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MergeTrade": kitex.NewMethodInfo(
		mergeTradeHandler,
		newMergeTradeArgs,
		newMergeTradeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateExtendInfo": kitex.NewMethodInfo(
		updateExtendInfoHandler,
		newUpdateExtendInfoArgs,
		newUpdateExtendInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateTradeOrderStatus": kitex.NewMethodInfo(
		updateTradeOrderStatusHandler,
		newUpdateTradeOrderStatusArgs,
		newUpdateTradeOrderStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateDeliveryInfo": kitex.NewMethodInfo(
		updateDeliveryInfoHandler,
		newUpdateDeliveryInfoArgs,
		newUpdateDeliveryInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AddSubOrder": kitex.NewMethodInfo(
		addSubOrderHandler,
		newAddSubOrderArgs,
		newAddSubOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	tradeServiceServiceInfo                = NewServiceInfo()
	tradeServiceServiceInfoForClient       = NewServiceInfoForClient()
	tradeServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return tradeServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return tradeServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return tradeServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "TradeService"
	handlerType := (*api.TradeService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func queryTradeOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.QueryTradeOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.TradeService).QueryTradeOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryTradeOrderArgs:
		success, err := handler.(api.TradeService).QueryTradeOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryTradeOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryTradeOrderArgs() interface{} {
	return &QueryTradeOrderArgs{}
}

func newQueryTradeOrderResult() interface{} {
	return &QueryTradeOrderResult{}
}

type QueryTradeOrderArgs struct {
	Req *api.QueryTradeOrderRequest
}

func (p *QueryTradeOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.QueryTradeOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryTradeOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryTradeOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryTradeOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryTradeOrderArgs) Unmarshal(in []byte) error {
	msg := new(api.QueryTradeOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryTradeOrderArgs_Req_DEFAULT *api.QueryTradeOrderRequest

func (p *QueryTradeOrderArgs) GetReq() *api.QueryTradeOrderRequest {
	if !p.IsSetReq() {
		return QueryTradeOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryTradeOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryTradeOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryTradeOrderResult struct {
	Success *api.QueryTradeOrderResponse
}

var QueryTradeOrderResult_Success_DEFAULT *api.QueryTradeOrderResponse

func (p *QueryTradeOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.QueryTradeOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryTradeOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryTradeOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryTradeOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryTradeOrderResult) Unmarshal(in []byte) error {
	msg := new(api.QueryTradeOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryTradeOrderResult) GetSuccess() *api.QueryTradeOrderResponse {
	if !p.IsSetSuccess() {
		return QueryTradeOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryTradeOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.QueryTradeOrderResponse)
}

func (p *QueryTradeOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryTradeOrderResult) GetResult() interface{} {
	return p.Success
}

func tradeCreateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.TradeCreateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.TradeService).TradeCreate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *TradeCreateArgs:
		success, err := handler.(api.TradeService).TradeCreate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*TradeCreateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newTradeCreateArgs() interface{} {
	return &TradeCreateArgs{}
}

func newTradeCreateResult() interface{} {
	return &TradeCreateResult{}
}

type TradeCreateArgs struct {
	Req *api.TradeCreateRequest
}

func (p *TradeCreateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.TradeCreateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *TradeCreateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *TradeCreateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *TradeCreateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *TradeCreateArgs) Unmarshal(in []byte) error {
	msg := new(api.TradeCreateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var TradeCreateArgs_Req_DEFAULT *api.TradeCreateRequest

func (p *TradeCreateArgs) GetReq() *api.TradeCreateRequest {
	if !p.IsSetReq() {
		return TradeCreateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *TradeCreateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TradeCreateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TradeCreateResult struct {
	Success *api.TradeCreateResponse
}

var TradeCreateResult_Success_DEFAULT *api.TradeCreateResponse

func (p *TradeCreateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.TradeCreateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *TradeCreateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *TradeCreateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *TradeCreateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *TradeCreateResult) Unmarshal(in []byte) error {
	msg := new(api.TradeCreateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *TradeCreateResult) GetSuccess() *api.TradeCreateResponse {
	if !p.IsSetSuccess() {
		return TradeCreateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *TradeCreateResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.TradeCreateResponse)
}

func (p *TradeCreateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TradeCreateResult) GetResult() interface{} {
	return p.Success
}

func mergeTradeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.MergeTradeRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.TradeService).MergeTrade(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MergeTradeArgs:
		success, err := handler.(api.TradeService).MergeTrade(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MergeTradeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMergeTradeArgs() interface{} {
	return &MergeTradeArgs{}
}

func newMergeTradeResult() interface{} {
	return &MergeTradeResult{}
}

type MergeTradeArgs struct {
	Req *api.MergeTradeRequest
}

func (p *MergeTradeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.MergeTradeRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MergeTradeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MergeTradeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MergeTradeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MergeTradeArgs) Unmarshal(in []byte) error {
	msg := new(api.MergeTradeRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MergeTradeArgs_Req_DEFAULT *api.MergeTradeRequest

func (p *MergeTradeArgs) GetReq() *api.MergeTradeRequest {
	if !p.IsSetReq() {
		return MergeTradeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MergeTradeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MergeTradeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MergeTradeResult struct {
	Success *api.MergeTradeResponse
}

var MergeTradeResult_Success_DEFAULT *api.MergeTradeResponse

func (p *MergeTradeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.MergeTradeResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MergeTradeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MergeTradeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MergeTradeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MergeTradeResult) Unmarshal(in []byte) error {
	msg := new(api.MergeTradeResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MergeTradeResult) GetSuccess() *api.MergeTradeResponse {
	if !p.IsSetSuccess() {
		return MergeTradeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MergeTradeResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.MergeTradeResponse)
}

func (p *MergeTradeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MergeTradeResult) GetResult() interface{} {
	return p.Success
}

func updateExtendInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.UpdateExtendInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.TradeService).UpdateExtendInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateExtendInfoArgs:
		success, err := handler.(api.TradeService).UpdateExtendInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateExtendInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateExtendInfoArgs() interface{} {
	return &UpdateExtendInfoArgs{}
}

func newUpdateExtendInfoResult() interface{} {
	return &UpdateExtendInfoResult{}
}

type UpdateExtendInfoArgs struct {
	Req *api.UpdateExtendInfoRequest
}

func (p *UpdateExtendInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.UpdateExtendInfoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateExtendInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateExtendInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateExtendInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateExtendInfoArgs) Unmarshal(in []byte) error {
	msg := new(api.UpdateExtendInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateExtendInfoArgs_Req_DEFAULT *api.UpdateExtendInfoRequest

func (p *UpdateExtendInfoArgs) GetReq() *api.UpdateExtendInfoRequest {
	if !p.IsSetReq() {
		return UpdateExtendInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateExtendInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateExtendInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateExtendInfoResult struct {
	Success *api.UpdateExtendInfoResponse
}

var UpdateExtendInfoResult_Success_DEFAULT *api.UpdateExtendInfoResponse

func (p *UpdateExtendInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.UpdateExtendInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateExtendInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateExtendInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateExtendInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateExtendInfoResult) Unmarshal(in []byte) error {
	msg := new(api.UpdateExtendInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateExtendInfoResult) GetSuccess() *api.UpdateExtendInfoResponse {
	if !p.IsSetSuccess() {
		return UpdateExtendInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateExtendInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.UpdateExtendInfoResponse)
}

func (p *UpdateExtendInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateExtendInfoResult) GetResult() interface{} {
	return p.Success
}

func updateTradeOrderStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.UpdateTradeOrderStatusRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.TradeService).UpdateTradeOrderStatus(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateTradeOrderStatusArgs:
		success, err := handler.(api.TradeService).UpdateTradeOrderStatus(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateTradeOrderStatusResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateTradeOrderStatusArgs() interface{} {
	return &UpdateTradeOrderStatusArgs{}
}

func newUpdateTradeOrderStatusResult() interface{} {
	return &UpdateTradeOrderStatusResult{}
}

type UpdateTradeOrderStatusArgs struct {
	Req *api.UpdateTradeOrderStatusRequest
}

func (p *UpdateTradeOrderStatusArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.UpdateTradeOrderStatusRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateTradeOrderStatusArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateTradeOrderStatusArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateTradeOrderStatusArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateTradeOrderStatusArgs) Unmarshal(in []byte) error {
	msg := new(api.UpdateTradeOrderStatusRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateTradeOrderStatusArgs_Req_DEFAULT *api.UpdateTradeOrderStatusRequest

func (p *UpdateTradeOrderStatusArgs) GetReq() *api.UpdateTradeOrderStatusRequest {
	if !p.IsSetReq() {
		return UpdateTradeOrderStatusArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateTradeOrderStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateTradeOrderStatusArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateTradeOrderStatusResult struct {
	Success *api.UpdateTradeOrderStatusResponse
}

var UpdateTradeOrderStatusResult_Success_DEFAULT *api.UpdateTradeOrderStatusResponse

func (p *UpdateTradeOrderStatusResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.UpdateTradeOrderStatusResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateTradeOrderStatusResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateTradeOrderStatusResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateTradeOrderStatusResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateTradeOrderStatusResult) Unmarshal(in []byte) error {
	msg := new(api.UpdateTradeOrderStatusResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateTradeOrderStatusResult) GetSuccess() *api.UpdateTradeOrderStatusResponse {
	if !p.IsSetSuccess() {
		return UpdateTradeOrderStatusResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateTradeOrderStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.UpdateTradeOrderStatusResponse)
}

func (p *UpdateTradeOrderStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateTradeOrderStatusResult) GetResult() interface{} {
	return p.Success
}

func updateDeliveryInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.UpdateDeliveryInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.TradeService).UpdateDeliveryInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateDeliveryInfoArgs:
		success, err := handler.(api.TradeService).UpdateDeliveryInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateDeliveryInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateDeliveryInfoArgs() interface{} {
	return &UpdateDeliveryInfoArgs{}
}

func newUpdateDeliveryInfoResult() interface{} {
	return &UpdateDeliveryInfoResult{}
}

type UpdateDeliveryInfoArgs struct {
	Req *api.UpdateDeliveryInfoRequest
}

func (p *UpdateDeliveryInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.UpdateDeliveryInfoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateDeliveryInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateDeliveryInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateDeliveryInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateDeliveryInfoArgs) Unmarshal(in []byte) error {
	msg := new(api.UpdateDeliveryInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateDeliveryInfoArgs_Req_DEFAULT *api.UpdateDeliveryInfoRequest

func (p *UpdateDeliveryInfoArgs) GetReq() *api.UpdateDeliveryInfoRequest {
	if !p.IsSetReq() {
		return UpdateDeliveryInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateDeliveryInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateDeliveryInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateDeliveryInfoResult struct {
	Success *api.UpdateDeliveryInfoResponse
}

var UpdateDeliveryInfoResult_Success_DEFAULT *api.UpdateDeliveryInfoResponse

func (p *UpdateDeliveryInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.UpdateDeliveryInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateDeliveryInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateDeliveryInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateDeliveryInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateDeliveryInfoResult) Unmarshal(in []byte) error {
	msg := new(api.UpdateDeliveryInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateDeliveryInfoResult) GetSuccess() *api.UpdateDeliveryInfoResponse {
	if !p.IsSetSuccess() {
		return UpdateDeliveryInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateDeliveryInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.UpdateDeliveryInfoResponse)
}

func (p *UpdateDeliveryInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateDeliveryInfoResult) GetResult() interface{} {
	return p.Success
}

func addSubOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.AddSubOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.TradeService).AddSubOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddSubOrderArgs:
		success, err := handler.(api.TradeService).AddSubOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddSubOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddSubOrderArgs() interface{} {
	return &AddSubOrderArgs{}
}

func newAddSubOrderResult() interface{} {
	return &AddSubOrderResult{}
}

type AddSubOrderArgs struct {
	Req *api.AddSubOrderRequest
}

func (p *AddSubOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.AddSubOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddSubOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddSubOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddSubOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddSubOrderArgs) Unmarshal(in []byte) error {
	msg := new(api.AddSubOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddSubOrderArgs_Req_DEFAULT *api.AddSubOrderRequest

func (p *AddSubOrderArgs) GetReq() *api.AddSubOrderRequest {
	if !p.IsSetReq() {
		return AddSubOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddSubOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddSubOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddSubOrderResult struct {
	Success *api.AddSubOrderResponse
}

var AddSubOrderResult_Success_DEFAULT *api.AddSubOrderResponse

func (p *AddSubOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.AddSubOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddSubOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddSubOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddSubOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddSubOrderResult) Unmarshal(in []byte) error {
	msg := new(api.AddSubOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddSubOrderResult) GetSuccess() *api.AddSubOrderResponse {
	if !p.IsSetSuccess() {
		return AddSubOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddSubOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.AddSubOrderResponse)
}

func (p *AddSubOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddSubOrderResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) QueryTradeOrder(ctx context.Context, Req *api.QueryTradeOrderRequest) (r *api.QueryTradeOrderResponse, err error) {
	var _args QueryTradeOrderArgs
	_args.Req = Req
	var _result QueryTradeOrderResult
	if err = p.c.Call(ctx, "QueryTradeOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TradeCreate(ctx context.Context, Req *api.TradeCreateRequest) (r *api.TradeCreateResponse, err error) {
	var _args TradeCreateArgs
	_args.Req = Req
	var _result TradeCreateResult
	if err = p.c.Call(ctx, "TradeCreate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MergeTrade(ctx context.Context, Req *api.MergeTradeRequest) (r *api.MergeTradeResponse, err error) {
	var _args MergeTradeArgs
	_args.Req = Req
	var _result MergeTradeResult
	if err = p.c.Call(ctx, "MergeTrade", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateExtendInfo(ctx context.Context, Req *api.UpdateExtendInfoRequest) (r *api.UpdateExtendInfoResponse, err error) {
	var _args UpdateExtendInfoArgs
	_args.Req = Req
	var _result UpdateExtendInfoResult
	if err = p.c.Call(ctx, "UpdateExtendInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTradeOrderStatus(ctx context.Context, Req *api.UpdateTradeOrderStatusRequest) (r *api.UpdateTradeOrderStatusResponse, err error) {
	var _args UpdateTradeOrderStatusArgs
	_args.Req = Req
	var _result UpdateTradeOrderStatusResult
	if err = p.c.Call(ctx, "UpdateTradeOrderStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDeliveryInfo(ctx context.Context, Req *api.UpdateDeliveryInfoRequest) (r *api.UpdateDeliveryInfoResponse, err error) {
	var _args UpdateDeliveryInfoArgs
	_args.Req = Req
	var _result UpdateDeliveryInfoResult
	if err = p.c.Call(ctx, "UpdateDeliveryInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddSubOrder(ctx context.Context, Req *api.AddSubOrderRequest) (r *api.AddSubOrderResponse, err error) {
	var _args AddSubOrderArgs
	_args.Req = Req
	var _result AddSubOrderResult
	if err = p.c.Call(ctx, "AddSubOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
