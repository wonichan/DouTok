// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	validate "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Promotion) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Promotion[number], err)
}

func (x *Promotion) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Promotion) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Promotion) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Promotion) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PromotionType = TradePromotionType(v)
	return offset, nil
}

func (x *PromotionCreateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PromotionCreateRequest[number], err)
}

func (x *PromotionCreateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PromotionCreateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PromotionCreateRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PromotionType = TradePromotionType(v)
	return offset, nil
}

func (x *PromotionCreateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PromotionCreateResponse[number], err)
}

func (x *PromotionCreateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *PromotionCreateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Promotion
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Promotion = &v
	return offset, nil
}

func (x *PromotionQueryRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PromotionQueryRequest[number], err)
}

func (x *PromotionQueryRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.IdList = append(x.IdList, v)
			return offset, err
		})
	return offset, err
}

func (x *PromotionQueryRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.NameList = append(x.NameList, v)
	return offset, err
}

func (x *PromotionQueryRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.PromotionTypeList = append(x.PromotionTypeList, TradePromotionType(v))
			return offset, nil
		})
	return offset, err
}

func (x *PromotionQueryResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PromotionQueryResponse[number], err)
}

func (x *PromotionQueryResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *PromotionQueryResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Promotion
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PromotionList = append(x.PromotionList, &v)
	return offset, nil
}

func (x *PromotionUpdateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PromotionUpdateRequest[number], err)
}

func (x *PromotionUpdateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PromotionUpdateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PromotionUpdateRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PromotionUpdateRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PromotionType = TradePromotionType(v)
	return offset, nil
}

func (x *PromotionUpdateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PromotionUpdateResponse[number], err)
}

func (x *PromotionUpdateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *PromotionUpdateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Promotion
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Promotion = &v
	return offset, nil
}

func (x *PromotionDeleteRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PromotionDeleteRequest[number], err)
}

func (x *PromotionDeleteRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PromotionDeleteResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PromotionDeleteResponse[number], err)
}

func (x *PromotionDeleteResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *CreateSpecificPromotionRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateSpecificPromotionRequest[number], err)
}

func (x *CreateSpecificPromotionRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PromotionId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateSpecificPromotionRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.AccountId = append(x.AccountId, v)
			return offset, err
		})
	return offset, err
}

func (x *CreateSpecificPromotionRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ExpireTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateSpecificPromotionResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateSpecificPromotionResponse[number], err)
}

func (x *CreateSpecificPromotionResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *QuerySpecificPromotionItem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QuerySpecificPromotionItem[number], err)
}

func (x *QuerySpecificPromotionItem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QuerySpecificPromotionItem) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QuerySpecificPromotionRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QuerySpecificPromotionRequest[number], err)
}

func (x *QuerySpecificPromotionRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v QuerySpecificPromotionItem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.QuerySpecificPromotionItem = append(x.QuerySpecificPromotionItem, &v)
	return offset, nil
}

func (x *QuerySpecificPromotionResult) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QuerySpecificPromotionResult[number], err)
}

func (x *QuerySpecificPromotionResult) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QuerySpecificPromotionResult) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QuerySpecificPromotionResult) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.EntryId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QuerySpecificPromotionResult) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v Promotion
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Promotion = &v
	return offset, nil
}

func (x *QuerySpecificPromotionResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QuerySpecificPromotionResponse[number], err)
}

func (x *QuerySpecificPromotionResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *QuerySpecificPromotionResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v QuerySpecificPromotionResult
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PromotionList = append(x.PromotionList, &v)
	return offset, nil
}

func (x *CalculateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CalculateRequest[number], err)
}

func (x *CalculateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TotalAmount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *CalculateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.PromotionEntryIdList = append(x.PromotionEntryIdList, v)
			return offset, err
		})
	return offset, err
}

func (x *CalculateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CalculateResponse[number], err)
}

func (x *CalculateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *CalculateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CalculatedAmount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Promotion) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Promotion) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Promotion) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Promotion) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *Promotion) fastWriteField4(buf []byte) (offset int) {
	if x.PromotionType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetPromotionType()))
	return offset
}

func (x *PromotionCreateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PromotionCreateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *PromotionCreateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetDescription())
	return offset
}

func (x *PromotionCreateRequest) fastWriteField3(buf []byte) (offset int) {
	if x.PromotionType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetPromotionType()))
	return offset
}

func (x *PromotionCreateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PromotionCreateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *PromotionCreateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Promotion == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPromotion())
	return offset
}

func (x *PromotionQueryRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PromotionQueryRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.IdList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetIdList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetIdList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *PromotionQueryRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.NameList) == 0 {
		return offset
	}
	for i := range x.GetNameList() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetNameList()[i])
	}
	return offset
}

func (x *PromotionQueryRequest) fastWriteField3(buf []byte) (offset int) {
	if len(x.PromotionTypeList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 3, len(x.GetPromotionTypeList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, int32(x.GetPromotionTypeList()[numIdxOrVal]))
			return offset
		})
	return offset
}

func (x *PromotionQueryResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PromotionQueryResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *PromotionQueryResponse) fastWriteField2(buf []byte) (offset int) {
	if x.PromotionList == nil {
		return offset
	}
	for i := range x.GetPromotionList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPromotionList()[i])
	}
	return offset
}

func (x *PromotionUpdateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *PromotionUpdateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *PromotionUpdateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *PromotionUpdateRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *PromotionUpdateRequest) fastWriteField4(buf []byte) (offset int) {
	if x.PromotionType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetPromotionType()))
	return offset
}

func (x *PromotionUpdateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PromotionUpdateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *PromotionUpdateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Promotion == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPromotion())
	return offset
}

func (x *PromotionDeleteRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PromotionDeleteRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *PromotionDeleteResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PromotionDeleteResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *CreateSpecificPromotionRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateSpecificPromotionRequest) fastWriteField1(buf []byte) (offset int) {
	if x.PromotionId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetPromotionId())
	return offset
}

func (x *CreateSpecificPromotionRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.AccountId) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 2, len(x.GetAccountId()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetAccountId()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *CreateSpecificPromotionRequest) fastWriteField3(buf []byte) (offset int) {
	if x.ExpireTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetExpireTime())
	return offset
}

func (x *CreateSpecificPromotionResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateSpecificPromotionResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *QuerySpecificPromotionItem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *QuerySpecificPromotionItem) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *QuerySpecificPromotionItem) fastWriteField2(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetAccountId())
	return offset
}

func (x *QuerySpecificPromotionRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *QuerySpecificPromotionRequest) fastWriteField1(buf []byte) (offset int) {
	if x.QuerySpecificPromotionItem == nil {
		return offset
	}
	for i := range x.GetQuerySpecificPromotionItem() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetQuerySpecificPromotionItem()[i])
	}
	return offset
}

func (x *QuerySpecificPromotionResult) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *QuerySpecificPromotionResult) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *QuerySpecificPromotionResult) fastWriteField2(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetAccountId())
	return offset
}

func (x *QuerySpecificPromotionResult) fastWriteField3(buf []byte) (offset int) {
	if x.EntryId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetEntryId())
	return offset
}

func (x *QuerySpecificPromotionResult) fastWriteField4(buf []byte) (offset int) {
	if x.Promotion == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetPromotion())
	return offset
}

func (x *QuerySpecificPromotionResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *QuerySpecificPromotionResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *QuerySpecificPromotionResponse) fastWriteField2(buf []byte) (offset int) {
	if x.PromotionList == nil {
		return offset
	}
	for i := range x.GetPromotionList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPromotionList()[i])
	}
	return offset
}

func (x *CalculateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CalculateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.TotalAmount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetTotalAmount())
	return offset
}

func (x *CalculateRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.PromotionEntryIdList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 2, len(x.GetPromotionEntryIdList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetPromotionEntryIdList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *CalculateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CalculateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *CalculateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.CalculatedAmount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetCalculatedAmount())
	return offset
}

func (x *Promotion) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Promotion) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Promotion) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Promotion) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *Promotion) sizeField4() (n int) {
	if x.PromotionType == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetPromotionType()))
	return n
}

func (x *PromotionCreateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PromotionCreateRequest) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *PromotionCreateRequest) sizeField2() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetDescription())
	return n
}

func (x *PromotionCreateRequest) sizeField3() (n int) {
	if x.PromotionType == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetPromotionType()))
	return n
}

func (x *PromotionCreateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PromotionCreateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *PromotionCreateResponse) sizeField2() (n int) {
	if x.Promotion == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPromotion())
	return n
}

func (x *PromotionQueryRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PromotionQueryRequest) sizeField1() (n int) {
	if len(x.IdList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetIdList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetIdList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *PromotionQueryRequest) sizeField2() (n int) {
	if len(x.NameList) == 0 {
		return n
	}
	for i := range x.GetNameList() {
		n += fastpb.SizeString(2, x.GetNameList()[i])
	}
	return n
}

func (x *PromotionQueryRequest) sizeField3() (n int) {
	if len(x.PromotionTypeList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(3, len(x.GetPromotionTypeList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, int32(x.GetPromotionTypeList()[numIdxOrVal]))
			return n
		})
	return n
}

func (x *PromotionQueryResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PromotionQueryResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *PromotionQueryResponse) sizeField2() (n int) {
	if x.PromotionList == nil {
		return n
	}
	for i := range x.GetPromotionList() {
		n += fastpb.SizeMessage(2, x.GetPromotionList()[i])
	}
	return n
}

func (x *PromotionUpdateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *PromotionUpdateRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *PromotionUpdateRequest) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *PromotionUpdateRequest) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *PromotionUpdateRequest) sizeField4() (n int) {
	if x.PromotionType == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetPromotionType()))
	return n
}

func (x *PromotionUpdateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PromotionUpdateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *PromotionUpdateResponse) sizeField2() (n int) {
	if x.Promotion == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPromotion())
	return n
}

func (x *PromotionDeleteRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PromotionDeleteRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *PromotionDeleteResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PromotionDeleteResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *CreateSpecificPromotionRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateSpecificPromotionRequest) sizeField1() (n int) {
	if x.PromotionId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetPromotionId())
	return n
}

func (x *CreateSpecificPromotionRequest) sizeField2() (n int) {
	if len(x.AccountId) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(2, len(x.GetAccountId()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetAccountId()[numIdxOrVal])
			return n
		})
	return n
}

func (x *CreateSpecificPromotionRequest) sizeField3() (n int) {
	if x.ExpireTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetExpireTime())
	return n
}

func (x *CreateSpecificPromotionResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateSpecificPromotionResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *QuerySpecificPromotionItem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *QuerySpecificPromotionItem) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *QuerySpecificPromotionItem) sizeField2() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetAccountId())
	return n
}

func (x *QuerySpecificPromotionRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *QuerySpecificPromotionRequest) sizeField1() (n int) {
	if x.QuerySpecificPromotionItem == nil {
		return n
	}
	for i := range x.GetQuerySpecificPromotionItem() {
		n += fastpb.SizeMessage(1, x.GetQuerySpecificPromotionItem()[i])
	}
	return n
}

func (x *QuerySpecificPromotionResult) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *QuerySpecificPromotionResult) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *QuerySpecificPromotionResult) sizeField2() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetAccountId())
	return n
}

func (x *QuerySpecificPromotionResult) sizeField3() (n int) {
	if x.EntryId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetEntryId())
	return n
}

func (x *QuerySpecificPromotionResult) sizeField4() (n int) {
	if x.Promotion == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetPromotion())
	return n
}

func (x *QuerySpecificPromotionResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *QuerySpecificPromotionResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *QuerySpecificPromotionResponse) sizeField2() (n int) {
	if x.PromotionList == nil {
		return n
	}
	for i := range x.GetPromotionList() {
		n += fastpb.SizeMessage(2, x.GetPromotionList()[i])
	}
	return n
}

func (x *CalculateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CalculateRequest) sizeField1() (n int) {
	if x.TotalAmount == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetTotalAmount())
	return n
}

func (x *CalculateRequest) sizeField2() (n int) {
	if len(x.PromotionEntryIdList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(2, len(x.GetPromotionEntryIdList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetPromotionEntryIdList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *CalculateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CalculateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *CalculateResponse) sizeField2() (n int) {
	if x.CalculatedAmount == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetCalculatedAmount())
	return n
}

var fieldIDToName_Promotion = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Description",
	4: "PromotionType",
}

var fieldIDToName_PromotionCreateRequest = map[int32]string{
	1: "Name",
	2: "Description",
	3: "PromotionType",
}

var fieldIDToName_PromotionCreateResponse = map[int32]string{
	1: "Meta",
	2: "Promotion",
}

var fieldIDToName_PromotionQueryRequest = map[int32]string{
	1: "IdList",
	2: "NameList",
	3: "PromotionTypeList",
}

var fieldIDToName_PromotionQueryResponse = map[int32]string{
	1: "Meta",
	2: "PromotionList",
}

var fieldIDToName_PromotionUpdateRequest = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Description",
	4: "PromotionType",
}

var fieldIDToName_PromotionUpdateResponse = map[int32]string{
	1: "Meta",
	2: "Promotion",
}

var fieldIDToName_PromotionDeleteRequest = map[int32]string{
	1: "Id",
}

var fieldIDToName_PromotionDeleteResponse = map[int32]string{
	1: "Meta",
}

var fieldIDToName_CreateSpecificPromotionRequest = map[int32]string{
	1: "PromotionId",
	2: "AccountId",
	3: "ExpireTime",
}

var fieldIDToName_CreateSpecificPromotionResponse = map[int32]string{
	1: "Meta",
}

var fieldIDToName_QuerySpecificPromotionItem = map[int32]string{
	1: "Id",
	2: "AccountId",
}

var fieldIDToName_QuerySpecificPromotionRequest = map[int32]string{
	1: "QuerySpecificPromotionItem",
}

var fieldIDToName_QuerySpecificPromotionResult = map[int32]string{
	1: "Id",
	2: "AccountId",
	3: "EntryId",
	4: "Promotion",
}

var fieldIDToName_QuerySpecificPromotionResponse = map[int32]string{
	1: "Meta",
	2: "PromotionList",
}

var fieldIDToName_CalculateRequest = map[int32]string{
	1: "TotalAmount",
	2: "PromotionEntryIdList",
}

var fieldIDToName_CalculateResponse = map[int32]string{
	1: "Meta",
	2: "CalculatedAmount",
}

var _ = validate.File_buf_validate_validate_proto
