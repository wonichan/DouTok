// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Template) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Template[number], err)
}

func (x *Template) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Template) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Template) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Template) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Template) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateTemplateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateTemplateRequest[number], err)
}

func (x *CreateTemplateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateTemplateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateTemplateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateTemplateResponse[number], err)
}

func (x *CreateTemplateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *CreateTemplateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Template
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Template = &v
	return offset, nil
}

func (x *UpdateTemplateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateTemplateRequest[number], err)
}

func (x *UpdateTemplateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TemplateId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateTemplateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateTemplateRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateTemplateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateTemplateResponse[number], err)
}

func (x *UpdateTemplateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *UpdateTemplateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Template
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Template = &v
	return offset, nil
}

func (x *ListTemplateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListTemplateRequest[number], err)
}

func (x *ListTemplateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PaginationRequest
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationRequest = &v
	return offset, nil
}

func (x *ListTemplateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v SearchField
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SearchFields = append(x.SearchFields, &v)
	return offset, nil
}

func (x *ListTemplateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListTemplateResponse[number], err)
}

func (x *ListTemplateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *ListTemplateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v PaginationResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationResponse = &v
	return offset, nil
}

func (x *ListTemplateResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Template
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Templates = append(x.Templates, &v)
	return offset, nil
}

func (x *GetTemplateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTemplateRequest[number], err)
}

func (x *GetTemplateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TemplateId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTemplateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTemplateResponse[number], err)
}

func (x *GetTemplateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *GetTemplateResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Template
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Template = &v
	return offset, nil
}

func (x *RemoveTemplateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RemoveTemplateRequest[number], err)
}

func (x *RemoveTemplateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TemplateId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RemoveTemplateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RemoveTemplateResponse[number], err)
}

func (x *RemoveTemplateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *SendSmsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendSmsRequest[number], err)
}

func (x *SendSmsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.To, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendSmsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TemplateId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SendSmsRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	if x.Data == nil {
		x.Data = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Data[key] = value
	return offset, nil
}

func (x *SendSmsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendSmsResponse[number], err)
}

func (x *SendSmsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *SendEmailRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendEmailRequest[number], err)
}

func (x *SendEmailRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.To, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEmailRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TemplateId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SendEmailRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.EmailTitle, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEmailRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	if x.Data == nil {
		x.Data = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Data[key] = value
	return offset, nil
}

func (x *SendEmailResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendEmailResponse[number], err)
}

func (x *SendEmailResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *SendRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendRequest[number], err)
}

func (x *SendRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PostType = PostType(v)
	return offset, nil
}

func (x *SendRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.To, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.TemplateId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SendResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendResponse[number], err)
}

func (x *SendResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *Template) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Template) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Template) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *Template) fastWriteField3(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetContent())
	return offset
}

func (x *Template) fastWriteField4(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetCreateTime())
	return offset
}

func (x *Template) fastWriteField5(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetUpdateTime())
	return offset
}

func (x *CreateTemplateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateTemplateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTitle())
	return offset
}

func (x *CreateTemplateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetContent())
	return offset
}

func (x *CreateTemplateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateTemplateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *CreateTemplateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Template == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTemplate())
	return offset
}

func (x *UpdateTemplateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UpdateTemplateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.TemplateId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTemplateId())
	return offset
}

func (x *UpdateTemplateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *UpdateTemplateRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetContent())
	return offset
}

func (x *UpdateTemplateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateTemplateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *UpdateTemplateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Template == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTemplate())
	return offset
}

func (x *ListTemplateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListTemplateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationRequest == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationRequest())
	return offset
}

func (x *ListTemplateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.SearchFields == nil {
		return offset
	}
	for i := range x.GetSearchFields() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetSearchFields()[i])
	}
	return offset
}

func (x *ListTemplateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ListTemplateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *ListTemplateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.PaginationResponse == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaginationResponse())
	return offset
}

func (x *ListTemplateResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Templates == nil {
		return offset
	}
	for i := range x.GetTemplates() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetTemplates()[i])
	}
	return offset
}

func (x *GetTemplateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetTemplateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.TemplateId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTemplateId())
	return offset
}

func (x *GetTemplateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetTemplateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *GetTemplateResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Template == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTemplate())
	return offset
}

func (x *RemoveTemplateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RemoveTemplateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.TemplateId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTemplateId())
	return offset
}

func (x *RemoveTemplateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RemoveTemplateResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *SendSmsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SendSmsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.To == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTo())
	return offset
}

func (x *SendSmsRequest) fastWriteField2(buf []byte) (offset int) {
	if x.TemplateId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTemplateId())
	return offset
}

func (x *SendSmsRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	for k, v := range x.GetData() {
		offset += fastpb.WriteMapEntry(buf[offset:], 3,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *SendSmsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SendSmsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *SendEmailRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SendEmailRequest) fastWriteField1(buf []byte) (offset int) {
	if x.To == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTo())
	return offset
}

func (x *SendEmailRequest) fastWriteField2(buf []byte) (offset int) {
	if x.TemplateId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTemplateId())
	return offset
}

func (x *SendEmailRequest) fastWriteField3(buf []byte) (offset int) {
	if x.EmailTitle == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetEmailTitle())
	return offset
}

func (x *SendEmailRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	for k, v := range x.GetData() {
		offset += fastpb.WriteMapEntry(buf[offset:], 4,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *SendEmailResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SendEmailResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *SendRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SendRequest) fastWriteField1(buf []byte) (offset int) {
	if x.PostType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetPostType()))
	return offset
}

func (x *SendRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetContent())
	return offset
}

func (x *SendRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTitle())
	return offset
}

func (x *SendRequest) fastWriteField4(buf []byte) (offset int) {
	if x.To == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetTo())
	return offset
}

func (x *SendRequest) fastWriteField5(buf []byte) (offset int) {
	if x.TemplateId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetTemplateId())
	return offset
}

func (x *SendResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SendResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMeta())
	return offset
}

func (x *Template) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Template) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Template) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *Template) sizeField3() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetContent())
	return n
}

func (x *Template) sizeField4() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetCreateTime())
	return n
}

func (x *Template) sizeField5() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetUpdateTime())
	return n
}

func (x *CreateTemplateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateTemplateRequest) sizeField1() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTitle())
	return n
}

func (x *CreateTemplateRequest) sizeField2() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetContent())
	return n
}

func (x *CreateTemplateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateTemplateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *CreateTemplateResponse) sizeField2() (n int) {
	if x.Template == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTemplate())
	return n
}

func (x *UpdateTemplateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UpdateTemplateRequest) sizeField1() (n int) {
	if x.TemplateId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTemplateId())
	return n
}

func (x *UpdateTemplateRequest) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *UpdateTemplateRequest) sizeField3() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetContent())
	return n
}

func (x *UpdateTemplateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateTemplateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *UpdateTemplateResponse) sizeField2() (n int) {
	if x.Template == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTemplate())
	return n
}

func (x *ListTemplateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListTemplateRequest) sizeField1() (n int) {
	if x.PaginationRequest == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationRequest())
	return n
}

func (x *ListTemplateRequest) sizeField2() (n int) {
	if x.SearchFields == nil {
		return n
	}
	for i := range x.GetSearchFields() {
		n += fastpb.SizeMessage(2, x.GetSearchFields()[i])
	}
	return n
}

func (x *ListTemplateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ListTemplateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *ListTemplateResponse) sizeField2() (n int) {
	if x.PaginationResponse == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaginationResponse())
	return n
}

func (x *ListTemplateResponse) sizeField3() (n int) {
	if x.Templates == nil {
		return n
	}
	for i := range x.GetTemplates() {
		n += fastpb.SizeMessage(3, x.GetTemplates()[i])
	}
	return n
}

func (x *GetTemplateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetTemplateRequest) sizeField1() (n int) {
	if x.TemplateId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTemplateId())
	return n
}

func (x *GetTemplateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetTemplateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *GetTemplateResponse) sizeField2() (n int) {
	if x.Template == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTemplate())
	return n
}

func (x *RemoveTemplateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RemoveTemplateRequest) sizeField1() (n int) {
	if x.TemplateId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTemplateId())
	return n
}

func (x *RemoveTemplateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RemoveTemplateResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *SendSmsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SendSmsRequest) sizeField1() (n int) {
	if x.To == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTo())
	return n
}

func (x *SendSmsRequest) sizeField2() (n int) {
	if x.TemplateId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTemplateId())
	return n
}

func (x *SendSmsRequest) sizeField3() (n int) {
	if x.Data == nil {
		return n
	}
	for k, v := range x.GetData() {
		n += fastpb.SizeMapEntry(3,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *SendSmsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SendSmsResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *SendEmailRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SendEmailRequest) sizeField1() (n int) {
	if x.To == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTo())
	return n
}

func (x *SendEmailRequest) sizeField2() (n int) {
	if x.TemplateId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTemplateId())
	return n
}

func (x *SendEmailRequest) sizeField3() (n int) {
	if x.EmailTitle == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetEmailTitle())
	return n
}

func (x *SendEmailRequest) sizeField4() (n int) {
	if x.Data == nil {
		return n
	}
	for k, v := range x.GetData() {
		n += fastpb.SizeMapEntry(4,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *SendEmailResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SendEmailResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

func (x *SendRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SendRequest) sizeField1() (n int) {
	if x.PostType == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetPostType()))
	return n
}

func (x *SendRequest) sizeField2() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetContent())
	return n
}

func (x *SendRequest) sizeField3() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTitle())
	return n
}

func (x *SendRequest) sizeField4() (n int) {
	if x.To == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetTo())
	return n
}

func (x *SendRequest) sizeField5() (n int) {
	if x.TemplateId == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetTemplateId())
	return n
}

func (x *SendResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SendResponse) sizeField1() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMeta())
	return n
}

var fieldIDToName_Template = map[int32]string{
	1: "Id",
	2: "Title",
	3: "Content",
	4: "CreateTime",
	5: "UpdateTime",
}

var fieldIDToName_CreateTemplateRequest = map[int32]string{
	1: "Title",
	2: "Content",
}

var fieldIDToName_CreateTemplateResponse = map[int32]string{
	1: "Meta",
	2: "Template",
}

var fieldIDToName_UpdateTemplateRequest = map[int32]string{
	1: "TemplateId",
	2: "Title",
	3: "Content",
}

var fieldIDToName_UpdateTemplateResponse = map[int32]string{
	1: "Meta",
	2: "Template",
}

var fieldIDToName_ListTemplateRequest = map[int32]string{
	1: "PaginationRequest",
	2: "SearchFields",
}

var fieldIDToName_ListTemplateResponse = map[int32]string{
	1: "Meta",
	2: "PaginationResponse",
	3: "Templates",
}

var fieldIDToName_GetTemplateRequest = map[int32]string{
	1: "TemplateId",
}

var fieldIDToName_GetTemplateResponse = map[int32]string{
	1: "Meta",
	2: "Template",
}

var fieldIDToName_RemoveTemplateRequest = map[int32]string{
	1: "TemplateId",
}

var fieldIDToName_RemoveTemplateResponse = map[int32]string{
	1: "Meta",
}

var fieldIDToName_SendSmsRequest = map[int32]string{
	1: "To",
	2: "TemplateId",
	3: "Data",
}

var fieldIDToName_SendSmsResponse = map[int32]string{
	1: "Meta",
}

var fieldIDToName_SendEmailRequest = map[int32]string{
	1: "To",
	2: "TemplateId",
	3: "EmailTitle",
	4: "Data",
}

var fieldIDToName_SendEmailResponse = map[int32]string{
	1: "Meta",
}

var fieldIDToName_SendRequest = map[int32]string{
	1: "PostType",
	2: "Content",
	3: "Title",
	4: "To",
	5: "TemplateId",
}

var fieldIDToName_SendResponse = map[int32]string{
	1: "Meta",
}
