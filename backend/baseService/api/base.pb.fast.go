// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Metadata) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Metadata[number], err)
}

func (x *Metadata) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BizCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Metadata) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Metadata) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Domain, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Metadata) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Reason = append(x.Reason, v)
	return offset, err
}

func (x *SortField) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SortField[number], err)
}

func (x *SortField) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Field, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SortField) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Order = SortOrder(v)
	return offset, nil
}

func (x *PaginationRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PaginationRequest[number], err)
}

func (x *PaginationRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *PaginationRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Size, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *PaginationRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v SortField
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Sort = append(x.Sort, &v)
	return offset, nil
}

func (x *PaginationResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PaginationResponse[number], err)
}

func (x *PaginationResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *PaginationResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *PaginationResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SearchField) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchField[number], err)
}

func (x *SearchField) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Field, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchField) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchField) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ValueList = append(x.ValueList, v)
	return offset, err
}

func (x *SearchField) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Operator = SearchOperator(v)
	return offset, nil
}

func (x *SearchRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchRequest[number], err)
}

func (x *SearchRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SearchField
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Search = append(x.Search, &v)
	return offset, nil
}

func (x *Metadata) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Metadata) fastWriteField1(buf []byte) (offset int) {
	if x.BizCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetBizCode())
	return offset
}

func (x *Metadata) fastWriteField2(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMessage())
	return offset
}

func (x *Metadata) fastWriteField3(buf []byte) (offset int) {
	if x.Domain == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDomain())
	return offset
}

func (x *Metadata) fastWriteField4(buf []byte) (offset int) {
	if len(x.Reason) == 0 {
		return offset
	}
	for i := range x.GetReason() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetReason()[i])
	}
	return offset
}

func (x *SortField) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SortField) fastWriteField1(buf []byte) (offset int) {
	if x.Field == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetField())
	return offset
}

func (x *SortField) fastWriteField2(buf []byte) (offset int) {
	if x.Order == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetOrder()))
	return offset
}

func (x *PaginationRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PaginationRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetPage())
	return offset
}

func (x *PaginationRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Size == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetSize())
	return offset
}

func (x *PaginationRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Sort == nil {
		return offset
	}
	for i := range x.GetSort() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetSort()[i])
	}
	return offset
}

func (x *PaginationResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PaginationResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetPage())
	return offset
}

func (x *PaginationResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *PaginationResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetCount())
	return offset
}

func (x *SearchField) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SearchField) fastWriteField1(buf []byte) (offset int) {
	if x.Field == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetField())
	return offset
}

func (x *SearchField) fastWriteField2(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetValue())
	return offset
}

func (x *SearchField) fastWriteField3(buf []byte) (offset int) {
	if len(x.ValueList) == 0 {
		return offset
	}
	for i := range x.GetValueList() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetValueList()[i])
	}
	return offset
}

func (x *SearchField) fastWriteField4(buf []byte) (offset int) {
	if x.Operator == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetOperator()))
	return offset
}

func (x *SearchRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SearchRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Search == nil {
		return offset
	}
	for i := range x.GetSearch() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSearch()[i])
	}
	return offset
}

func (x *Metadata) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Metadata) sizeField1() (n int) {
	if x.BizCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetBizCode())
	return n
}

func (x *Metadata) sizeField2() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMessage())
	return n
}

func (x *Metadata) sizeField3() (n int) {
	if x.Domain == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDomain())
	return n
}

func (x *Metadata) sizeField4() (n int) {
	if len(x.Reason) == 0 {
		return n
	}
	for i := range x.GetReason() {
		n += fastpb.SizeString(4, x.GetReason()[i])
	}
	return n
}

func (x *SortField) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SortField) sizeField1() (n int) {
	if x.Field == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetField())
	return n
}

func (x *SortField) sizeField2() (n int) {
	if x.Order == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetOrder()))
	return n
}

func (x *PaginationRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PaginationRequest) sizeField1() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetPage())
	return n
}

func (x *PaginationRequest) sizeField2() (n int) {
	if x.Size == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetSize())
	return n
}

func (x *PaginationRequest) sizeField3() (n int) {
	if x.Sort == nil {
		return n
	}
	for i := range x.GetSort() {
		n += fastpb.SizeMessage(3, x.GetSort()[i])
	}
	return n
}

func (x *PaginationResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PaginationResponse) sizeField1() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetPage())
	return n
}

func (x *PaginationResponse) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetTotal())
	return n
}

func (x *PaginationResponse) sizeField3() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetCount())
	return n
}

func (x *SearchField) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SearchField) sizeField1() (n int) {
	if x.Field == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetField())
	return n
}

func (x *SearchField) sizeField2() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetValue())
	return n
}

func (x *SearchField) sizeField3() (n int) {
	if len(x.ValueList) == 0 {
		return n
	}
	for i := range x.GetValueList() {
		n += fastpb.SizeString(3, x.GetValueList()[i])
	}
	return n
}

func (x *SearchField) sizeField4() (n int) {
	if x.Operator == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetOperator()))
	return n
}

func (x *SearchRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SearchRequest) sizeField1() (n int) {
	if x.Search == nil {
		return n
	}
	for i := range x.GetSearch() {
		n += fastpb.SizeMessage(1, x.GetSearch()[i])
	}
	return n
}

var fieldIDToName_Metadata = map[int32]string{
	1: "BizCode",
	2: "Message",
	3: "Domain",
	4: "Reason",
}

var fieldIDToName_SortField = map[int32]string{
	1: "Field",
	2: "Order",
}

var fieldIDToName_PaginationRequest = map[int32]string{
	1: "Page",
	2: "Size",
	3: "Sort",
}

var fieldIDToName_PaginationResponse = map[int32]string{
	1: "Page",
	2: "Total",
	3: "Count",
}

var fieldIDToName_SearchField = map[int32]string{
	1: "Field",
	2: "Value",
	3: "ValueList",
	4: "Operator",
}

var fieldIDToName_SearchRequest = map[int32]string{
	1: "Search",
}
