// Code generated by Kitex v0.12.3. DO NOT EDIT.

package authservice

import (
	api "DouTok-example/backend/baseService/kitex_gen/api"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateVerificationCode": kitex.NewMethodInfo(
		createVerificationCodeHandler,
		newCreateVerificationCodeArgs,
		newCreateVerificationCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ValidateVerificationCode": kitex.NewMethodInfo(
		validateVerificationCodeHandler,
		newValidateVerificationCodeArgs,
		newValidateVerificationCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	authServiceServiceInfo                = NewServiceInfo()
	authServiceServiceInfoForClient       = NewServiceInfoForClient()
	authServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*api.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func createVerificationCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.CreateVerificationCodeRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.AuthService).CreateVerificationCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateVerificationCodeArgs:
		success, err := handler.(api.AuthService).CreateVerificationCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateVerificationCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateVerificationCodeArgs() interface{} {
	return &CreateVerificationCodeArgs{}
}

func newCreateVerificationCodeResult() interface{} {
	return &CreateVerificationCodeResult{}
}

type CreateVerificationCodeArgs struct {
	Req *api.CreateVerificationCodeRequest
}

func (p *CreateVerificationCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.CreateVerificationCodeRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateVerificationCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateVerificationCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateVerificationCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateVerificationCodeArgs) Unmarshal(in []byte) error {
	msg := new(api.CreateVerificationCodeRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateVerificationCodeArgs_Req_DEFAULT *api.CreateVerificationCodeRequest

func (p *CreateVerificationCodeArgs) GetReq() *api.CreateVerificationCodeRequest {
	if !p.IsSetReq() {
		return CreateVerificationCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateVerificationCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateVerificationCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateVerificationCodeResult struct {
	Success *api.CreateVerificationCodeResponse
}

var CreateVerificationCodeResult_Success_DEFAULT *api.CreateVerificationCodeResponse

func (p *CreateVerificationCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.CreateVerificationCodeResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateVerificationCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateVerificationCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateVerificationCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateVerificationCodeResult) Unmarshal(in []byte) error {
	msg := new(api.CreateVerificationCodeResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateVerificationCodeResult) GetSuccess() *api.CreateVerificationCodeResponse {
	if !p.IsSetSuccess() {
		return CreateVerificationCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateVerificationCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.CreateVerificationCodeResponse)
}

func (p *CreateVerificationCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateVerificationCodeResult) GetResult() interface{} {
	return p.Success
}

func validateVerificationCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.ValidateVerificationCodeRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.AuthService).ValidateVerificationCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ValidateVerificationCodeArgs:
		success, err := handler.(api.AuthService).ValidateVerificationCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ValidateVerificationCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newValidateVerificationCodeArgs() interface{} {
	return &ValidateVerificationCodeArgs{}
}

func newValidateVerificationCodeResult() interface{} {
	return &ValidateVerificationCodeResult{}
}

type ValidateVerificationCodeArgs struct {
	Req *api.ValidateVerificationCodeRequest
}

func (p *ValidateVerificationCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.ValidateVerificationCodeRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ValidateVerificationCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ValidateVerificationCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ValidateVerificationCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ValidateVerificationCodeArgs) Unmarshal(in []byte) error {
	msg := new(api.ValidateVerificationCodeRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ValidateVerificationCodeArgs_Req_DEFAULT *api.ValidateVerificationCodeRequest

func (p *ValidateVerificationCodeArgs) GetReq() *api.ValidateVerificationCodeRequest {
	if !p.IsSetReq() {
		return ValidateVerificationCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ValidateVerificationCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ValidateVerificationCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ValidateVerificationCodeResult struct {
	Success *api.ValidateVerificationCodeResponse
}

var ValidateVerificationCodeResult_Success_DEFAULT *api.ValidateVerificationCodeResponse

func (p *ValidateVerificationCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.ValidateVerificationCodeResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ValidateVerificationCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ValidateVerificationCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ValidateVerificationCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ValidateVerificationCodeResult) Unmarshal(in []byte) error {
	msg := new(api.ValidateVerificationCodeResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ValidateVerificationCodeResult) GetSuccess() *api.ValidateVerificationCodeResponse {
	if !p.IsSetSuccess() {
		return ValidateVerificationCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ValidateVerificationCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.ValidateVerificationCodeResponse)
}

func (p *ValidateVerificationCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ValidateVerificationCodeResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVerificationCode(ctx context.Context, Req *api.CreateVerificationCodeRequest) (r *api.CreateVerificationCodeResponse, err error) {
	var _args CreateVerificationCodeArgs
	_args.Req = Req
	var _result CreateVerificationCodeResult
	if err = p.c.Call(ctx, "CreateVerificationCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ValidateVerificationCode(ctx context.Context, Req *api.ValidateVerificationCodeRequest) (r *api.ValidateVerificationCodeResponse, err error) {
	var _args ValidateVerificationCodeArgs
	_args.Req = Req
	var _result ValidateVerificationCodeResult
	if err = p.c.Call(ctx, "ValidateVerificationCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
